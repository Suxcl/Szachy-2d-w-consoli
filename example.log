10/28/2023 01:31:42 PM Lanuching Main.py
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFD50> coordinates: (1, 0)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFD90> coordinates: (1, 1)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFDD0> coordinates: (1, 2)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFE50> coordinates: (1, 3)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFE90> coordinates: (1, 4)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFED0> coordinates: (1, 5)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFF10> coordinates: (1, 6)
10/28/2023 01:31:42 PM figure: <piece.Pawn object at 0x00000141834EFF50> coordinates: (1, 7)
10/28/2023 01:31:44 PM value meets requirements
10/28/2023 01:31:44 PM moves: []
10/28/2023 01:31:44 PM translated value 6 0
10/28/2023 01:31:44 PM Move(): attempting move() with (6, 0)
10/28/2023 01:31:44 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:31:44 PM Move(): move is possible
10/28/2023 01:31:44 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:31:44 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000141834EFF90>
10/28/2023 01:31:44 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:31:44 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:31:44 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:31:44 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:31:44 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EF450> (5, 0)
10/28/2023 01:31:44 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:31:44 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:31:44 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EF1D0> (4, 0)
10/28/2023 01:31:44 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:31:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:31:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:31:44 PM Move(): moves and attacks registered
10/28/2023 01:31:47 PM value meets requirements
10/28/2023 01:31:47 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:31:47 PM translated value 5 0
10/28/2023 01:31:47 PM moves exist attempting checking
10/28/2023 01:31:47 PM found move (5, 0) in [(5, 0), (4, 0)]
10/28/2023 01:37:52 PM value meets requirements
10/28/2023 01:37:52 PM moves: []
10/28/2023 01:37:52 PM translated value 1 0
10/28/2023 01:37:52 PM Move(): attempting move() with (1, 0)
10/28/2023 01:37:52 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 01:37:52 PM Move(): move is possible
10/28/2023 01:37:52 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 01:37:52 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000141834EFD50>
10/28/2023 01:37:52 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:37:52 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:37:52 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 01:37:52 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:37:52 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000014182FDDD90> (2, 0)
10/28/2023 01:37:52 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 01:37:52 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:37:52 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EEF90> (3, 0)
10/28/2023 01:37:52 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 01:37:52 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 01:37:52 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 01:37:52 PM Move(): moves and attacks registered
10/28/2023 01:37:54 PM value meets requirements
10/28/2023 01:37:54 PM moves: [(2, 0), (3, 0)]
10/28/2023 01:37:54 PM translated value 2 0
10/28/2023 01:37:54 PM moves exist attempting checking
10/28/2023 01:37:54 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 01:38:00 PM value meets requirements
10/28/2023 01:38:00 PM moves: []
10/28/2023 01:38:00 PM translated value 6 2
10/28/2023 01:38:00 PM Move(): attempting move() with (6, 2)
10/28/2023 01:38:00 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 2) args
10/28/2023 01:38:00 PM Move(): move is possible
10/28/2023 01:38:00 PM RenderPossibleMoves(): choosen field: (6, 2)
10/28/2023 01:38:00 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000141834EFE10>
10/28/2023 01:38:00 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:38:00 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:38:00 PM Pawn Figure info: (6, 2, 'w', 'p')
10/28/2023 01:38:00 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:38:00 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EF4D0> (5, 2)
10/28/2023 01:38:00 PM Pawn (5, 2) is empty appended moves [(5, 2)]
10/28/2023 01:38:00 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:38:00 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EF250> (4, 2)
10/28/2023 01:38:00 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
10/28/2023 01:38:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
10/28/2023 01:38:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
10/28/2023 01:38:00 PM Move(): moves and attacks registered
10/28/2023 01:38:02 PM value meets requirements
10/28/2023 01:38:02 PM moves: [(5, 2), (4, 2)]
10/28/2023 01:38:02 PM translated value 4 2
10/28/2023 01:38:02 PM moves exist attempting checking
10/28/2023 01:38:02 PM found move (4, 2) in [(5, 2), (4, 2)]
10/28/2023 01:38:08 PM value meets requirements
10/28/2023 01:38:08 PM moves: []
10/28/2023 01:38:08 PM translated value 1 2
10/28/2023 01:38:08 PM Move(): attempting move() with (1, 2)
10/28/2023 01:38:08 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 2) args
10/28/2023 01:38:08 PM Move(): move is possible
10/28/2023 01:38:08 PM RenderPossibleMoves(): choosen field: (1, 2)
10/28/2023 01:38:08 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000141834EFDD0>
10/28/2023 01:38:08 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:38:08 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:38:08 PM Pawn Figure info: (1, 2, 'b', 'p')
10/28/2023 01:38:08 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:38:08 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EEDD0> (2, 2)
10/28/2023 01:38:08 PM Pawn (2, 2) is empty appended moves [(2, 2)]
10/28/2023 01:38:08 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:38:08 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000141834EF010> (3, 2)
10/28/2023 01:38:08 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
10/28/2023 01:38:08 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
10/28/2023 01:38:08 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
10/28/2023 01:38:08 PM Move(): moves and attacks registered
10/28/2023 01:38:12 PM value meets requirements
10/28/2023 01:38:12 PM moves: [(2, 2), (3, 2)]
10/28/2023 01:38:12 PM translated value 3 2
10/28/2023 01:38:12 PM moves exist attempting checking
10/28/2023 01:38:12 PM found move (3, 2) in [(2, 2), (3, 2)]
10/28/2023 01:38:26 PM value meets requirements
10/28/2023 01:38:26 PM moves: []
10/28/2023 01:38:26 PM translated value 7 3
10/28/2023 01:38:26 PM Move(): attempting move() with (7, 3)
10/28/2023 01:38:26 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 3) args
10/28/2023 01:38:26 PM Move(): move is possible
10/28/2023 01:38:26 PM RenderPossibleMoves(): choosen field: (7, 3)
10/28/2023 01:38:26 PM RenderPossibleMoves(): choosen figure: <piece.Queen object at 0x00000141834F8250>
10/28/2023 01:38:26 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:41:20 PM Lanuching Main.py
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF93D0> coordinates: (1, 0)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF9410> coordinates: (1, 1)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF9450> coordinates: (1, 2)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF94D0> coordinates: (1, 3)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF9510> coordinates: (1, 4)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF9550> coordinates: (1, 5)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF9590> coordinates: (1, 6)
10/28/2023 01:41:20 PM figure: <piece.Pawn object at 0x000001CF1FFF95D0> coordinates: (1, 7)
10/28/2023 01:41:27 PM value meets requirements
10/28/2023 01:41:27 PM moves: []
10/28/2023 01:41:27 PM translated value 6 1
10/28/2023 01:41:27 PM Move(): attempting move() with (6, 1)
10/28/2023 01:41:27 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 01:41:27 PM Move(): move is possible
10/28/2023 01:41:27 PM RenderPossibleMoves(): choosen field: (6, 1)
10/28/2023 01:41:27 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001CF1FFF9650>
10/28/2023 01:41:27 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:41:27 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:41:27 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 01:41:27 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:41:27 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001CF1FFF8B50> (5, 1)
10/28/2023 01:41:27 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 01:41:27 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:41:27 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001CF1FFF88D0> (4, 1)
10/28/2023 01:41:27 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 01:41:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 01:41:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 01:41:27 PM Move(): moves and attacks registered
10/28/2023 01:41:30 PM value meets requirements
10/28/2023 01:41:30 PM moves: [(5, 1), (4, 1)]
10/28/2023 01:41:30 PM translated value 6 0
10/28/2023 01:41:30 PM moves exist attempting checking
10/28/2023 01:41:30 PM did not found move (6, 0) in [(5, 1), (4, 1)]
10/28/2023 01:41:40 PM value meets requirements
10/28/2023 01:41:40 PM moves: [(5, 1), (4, 1)]
10/28/2023 01:41:40 PM translated value 6 0
10/28/2023 01:41:40 PM moves exist attempting checking
10/28/2023 01:41:40 PM did not found move (6, 0) in [(5, 1), (4, 1)]
10/28/2023 01:41:43 PM inputed value is ot of chcessboard indexes
10/28/2023 01:44:38 PM Lanuching Main.py
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482C8D0> coordinates: (1, 0)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482C910> coordinates: (1, 1)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482C950> coordinates: (1, 2)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482C9D0> coordinates: (1, 3)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482CA10> coordinates: (1, 4)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482CA50> coordinates: (1, 5)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482CA90> coordinates: (1, 6)
10/28/2023 01:44:38 PM figure: <piece.Pawn object at 0x00000292C482CAD0> coordinates: (1, 7)
10/28/2023 01:44:40 PM value meets requirements
10/28/2023 01:44:40 PM moves: []
10/28/2023 01:44:40 PM translated value 6 0
10/28/2023 01:44:40 PM Move(): attempting move() with (6, 0)
10/28/2023 01:44:40 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:44:40 PM Move(): move is possible
10/28/2023 01:44:40 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:44:40 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000292C482CB10>
10/28/2023 01:44:40 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:44:40 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:44:40 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:44:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:44:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000292C481BF90> (5, 0)
10/28/2023 01:44:40 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:44:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:44:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000292C481BD10> (4, 0)
10/28/2023 01:44:40 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:44:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:44:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:44:40 PM Move(): moves and attacks registered
10/28/2023 01:44:41 PM value meets requirements
10/28/2023 01:44:41 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:44:41 PM translated value 5 0
10/28/2023 01:44:41 PM moves exist attempting checking
10/28/2023 01:44:41 PM found move (5, 0) in [(5, 0), (4, 0)]
10/28/2023 01:44:46 PM value meets requirements
10/28/2023 01:44:46 PM moves: []
10/28/2023 01:44:46 PM translated value 1 1
10/28/2023 01:44:46 PM Move(): attempting move() with (1, 1)
10/28/2023 01:44:46 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:44:46 PM Move(): move is possible
10/28/2023 01:44:46 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:44:46 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000292C482C910>
10/28/2023 01:44:46 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:44:46 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:44:46 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:44:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:44:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000292C481B8D0> (2, 1)
10/28/2023 01:44:46 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:44:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:44:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000292C481BB10> (3, 1)
10/28/2023 01:44:46 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:44:46 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:44:46 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:44:46 PM Move(): moves and attacks registered
10/28/2023 01:44:48 PM value meets requirements
10/28/2023 01:44:48 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:44:48 PM translated value 2 1
10/28/2023 01:44:48 PM moves exist attempting checking
10/28/2023 01:44:48 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:44:55 PM value meets requirements
10/28/2023 01:44:55 PM moves: []
10/28/2023 01:44:55 PM translated value 7 0
10/28/2023 01:44:55 PM Move(): attempting move() with (7, 0)
10/28/2023 01:44:55 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:44:55 PM Move(): move is possible
10/28/2023 01:44:55 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:44:55 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x00000292C482CCD0>
10/28/2023 01:44:55 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:48:16 PM Lanuching Main.py
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F8E10> coordinates: (1, 0)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F8E90> coordinates: (1, 1)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F8F50> coordinates: (1, 2)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F8FD0> coordinates: (1, 3)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F9010> coordinates: (1, 4)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F9050> coordinates: (1, 5)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F9090> coordinates: (1, 6)
10/28/2023 01:48:16 PM figure: <piece.Pawn object at 0x000002B8066F90D0> coordinates: (1, 7)
10/28/2023 01:48:38 PM value meets requirements
10/28/2023 01:48:38 PM moves: []
10/28/2023 01:48:38 PM translated value 6 0
10/28/2023 01:48:38 PM Move(): attempting move() with (6, 0)
10/28/2023 01:48:38 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:48:38 PM Move(): move is possible
10/28/2023 01:48:38 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:48:38 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002B8066F9110>
10/28/2023 01:48:38 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:48:38 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:48:38 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:48:38 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:48:38 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002B8066F8090> (5, 0)
10/28/2023 01:48:38 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:48:38 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:48:38 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002B8066C3DD0> (4, 0)
10/28/2023 01:48:38 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:48:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:48:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:48:38 PM Move(): moves and attacks registered
10/28/2023 01:48:41 PM value meets requirements
10/28/2023 01:48:41 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:48:41 PM translated value 4 0
10/28/2023 01:48:41 PM moves exist attempting checking
10/28/2023 01:48:41 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:48:44 PM value meets requirements
10/28/2023 01:48:44 PM moves: []
10/28/2023 01:48:44 PM translated value 2 0
10/28/2023 01:48:44 PM Move(): attempting move() with (2, 0)
10/28/2023 01:48:44 PM CheckIfMoveFromFieldIsPossible(): attempting with (2, 0) args
10/28/2023 01:48:44 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 01:48:46 PM value meets requirements
10/28/2023 01:48:46 PM moves: []
10/28/2023 01:48:46 PM translated value 1 0
10/28/2023 01:48:46 PM Move(): attempting move() with (1, 0)
10/28/2023 01:48:46 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 01:48:46 PM Move(): move is possible
10/28/2023 01:48:46 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 01:48:46 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002B8066F8E10>
10/28/2023 01:48:46 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:48:46 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:48:46 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 01:48:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:48:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002B8066C3950> (2, 0)
10/28/2023 01:48:46 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 01:48:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:48:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002B8066C3B90> (3, 0)
10/28/2023 01:48:46 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 01:48:46 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 01:48:46 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 01:48:46 PM Move(): moves and attacks registered
10/28/2023 01:48:49 PM value meets requirements
10/28/2023 01:48:49 PM moves: [(2, 0), (3, 0)]
10/28/2023 01:48:49 PM translated value 3 0
10/28/2023 01:48:49 PM moves exist attempting checking
10/28/2023 01:48:49 PM found move (3, 0) in [(2, 0), (3, 0)]
10/28/2023 01:48:52 PM value meets requirements
10/28/2023 01:48:52 PM moves: []
10/28/2023 01:48:52 PM translated value 7 0
10/28/2023 01:48:52 PM Move(): attempting move() with (7, 0)
10/28/2023 01:48:52 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:48:52 PM Move(): move is possible
10/28/2023 01:48:52 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:48:52 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000002B8066F92D0>
10/28/2023 01:48:52 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:51:11 PM Lanuching Main.py
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8BD0> coordinates: (1, 0)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8C50> coordinates: (1, 1)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8D10> coordinates: (1, 2)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8D90> coordinates: (1, 3)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8DD0> coordinates: (1, 4)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8E10> coordinates: (1, 5)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8E50> coordinates: (1, 6)
10/28/2023 01:51:11 PM figure: <piece.Pawn object at 0x000001E019DB8E90> coordinates: (1, 7)
10/28/2023 01:51:12 PM value meets requirements
10/28/2023 01:51:12 PM moves: []
10/28/2023 01:51:12 PM translated value 6 0
10/28/2023 01:51:12 PM Move(): attempting move() with (6, 0)
10/28/2023 01:51:12 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:51:12 PM Move(): move is possible
10/28/2023 01:51:12 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:51:12 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001E019DB8ED0>
10/28/2023 01:51:12 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:51:12 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:51:12 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:51:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:51:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E019D8BE10> (5, 0)
10/28/2023 01:51:12 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:51:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:51:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E019D8BB90> (4, 0)
10/28/2023 01:51:12 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:51:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:51:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:51:12 PM Move(): moves and attacks registered
10/28/2023 01:51:13 PM value meets requirements
10/28/2023 01:51:13 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:51:13 PM translated value 4 0
10/28/2023 01:51:13 PM moves exist attempting checking
10/28/2023 01:51:13 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:51:18 PM value meets requirements
10/28/2023 01:51:18 PM moves: []
10/28/2023 01:51:18 PM translated value 2 1
10/28/2023 01:51:18 PM Move(): attempting move() with (2, 1)
10/28/2023 01:51:18 PM CheckIfMoveFromFieldIsPossible(): attempting with (2, 1) args
10/28/2023 01:51:18 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 01:51:23 PM value meets requirements
10/28/2023 01:51:23 PM moves: []
10/28/2023 01:51:23 PM translated value 1 1
10/28/2023 01:51:23 PM Move(): attempting move() with (1, 1)
10/28/2023 01:51:23 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:51:23 PM Move(): move is possible
10/28/2023 01:51:23 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:51:23 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001E019DB8C50>
10/28/2023 01:51:23 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:51:23 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:51:23 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:51:23 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:51:23 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E019D8B750> (2, 1)
10/28/2023 01:51:23 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:51:23 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:51:23 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E019D8B990> (3, 1)
10/28/2023 01:51:23 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:51:23 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:51:23 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:51:23 PM Move(): moves and attacks registered
10/28/2023 01:51:25 PM value meets requirements
10/28/2023 01:51:25 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:51:25 PM translated value 2 1
10/28/2023 01:51:25 PM moves exist attempting checking
10/28/2023 01:51:25 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:51:28 PM value meets requirements
10/28/2023 01:51:28 PM moves: []
10/28/2023 01:51:28 PM translated value 7 0
10/28/2023 01:51:28 PM Move(): attempting move() with (7, 0)
10/28/2023 01:51:28 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:51:28 PM Move(): move is possible
10/28/2023 01:51:28 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:51:28 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001E019DB9090>
10/28/2023 01:51:28 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:52:52 PM Lanuching Main.py
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898D10> coordinates: (1, 0)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898D90> coordinates: (1, 1)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898E50> coordinates: (1, 2)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898ED0> coordinates: (1, 3)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898F10> coordinates: (1, 4)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898F50> coordinates: (1, 5)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898F90> coordinates: (1, 6)
10/28/2023 01:52:52 PM figure: <piece.Pawn object at 0x0000026502898FD0> coordinates: (1, 7)
10/28/2023 01:52:54 PM value meets requirements
10/28/2023 01:52:54 PM moves: []
10/28/2023 01:52:54 PM translated value 6 0
10/28/2023 01:52:54 PM Move(): attempting move() with (6, 0)
10/28/2023 01:52:54 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:52:54 PM Move(): move is possible
10/28/2023 01:52:54 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:52:54 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000026502899010>
10/28/2023 01:52:54 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:52:54 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:52:54 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:52:54 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:52:54 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026502867F90> (5, 0)
10/28/2023 01:52:54 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:52:54 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:52:54 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026502867D10> (4, 0)
10/28/2023 01:52:54 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:52:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:52:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:52:54 PM Move(): moves and attacks registered
10/28/2023 01:52:55 PM value meets requirements
10/28/2023 01:52:55 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:52:55 PM translated value 4 0
10/28/2023 01:52:55 PM moves exist attempting checking
10/28/2023 01:52:55 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:52:59 PM value meets requirements
10/28/2023 01:52:59 PM moves: []
10/28/2023 01:52:59 PM translated value 1 1
10/28/2023 01:52:59 PM Move(): attempting move() with (1, 1)
10/28/2023 01:52:59 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:52:59 PM Move(): move is possible
10/28/2023 01:52:59 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:52:59 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000026502898D90>
10/28/2023 01:52:59 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:52:59 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:52:59 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:52:59 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:52:59 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000265028678D0> (2, 1)
10/28/2023 01:52:59 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:52:59 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:52:59 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026502867B10> (3, 1)
10/28/2023 01:52:59 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:52:59 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:52:59 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:52:59 PM Move(): moves and attacks registered
10/28/2023 01:53:00 PM value meets requirements
10/28/2023 01:53:00 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:53:00 PM translated value 2 1
10/28/2023 01:53:00 PM moves exist attempting checking
10/28/2023 01:53:00 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:53:02 PM value meets requirements
10/28/2023 01:53:02 PM moves: []
10/28/2023 01:53:02 PM translated value 7 0
10/28/2023 01:53:02 PM Move(): attempting move() with (7, 0)
10/28/2023 01:53:02 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:53:02 PM Move(): move is possible
10/28/2023 01:53:02 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:53:02 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x00000265028991D0>
10/28/2023 01:53:02 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:53:02 PM RenderPossibleMoves(): moves and attacks after: ([], [])
10/28/2023 01:53:02 PM Move(): moves and attacks registered
10/28/2023 01:53:05 PM value meets requirements
10/28/2023 01:53:05 PM moves: []
10/28/2023 01:53:05 PM translated value 7 0
10/28/2023 01:53:15 PM Lanuching Main.py
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F85D0> coordinates: (1, 0)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8650> coordinates: (1, 1)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8710> coordinates: (1, 2)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8790> coordinates: (1, 3)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F87D0> coordinates: (1, 4)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8810> coordinates: (1, 5)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8850> coordinates: (1, 6)
10/28/2023 01:53:15 PM figure: <piece.Pawn object at 0x000001EB6E7F8890> coordinates: (1, 7)
10/28/2023 01:53:17 PM value meets requirements
10/28/2023 01:53:17 PM moves: []
10/28/2023 01:53:17 PM translated value 6 0
10/28/2023 01:53:17 PM Move(): attempting move() with (6, 0)
10/28/2023 01:53:17 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:53:17 PM Move(): move is possible
10/28/2023 01:53:17 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:53:17 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001EB6E7F88D0>
10/28/2023 01:53:17 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:53:17 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:53:17 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EB6E7EF850> (5, 0)
10/28/2023 01:53:17 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EB6E7EF5D0> (4, 0)
10/28/2023 01:53:17 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:53:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:53:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:53:17 PM Move(): moves and attacks registered
10/28/2023 01:54:01 PM value meets requirements
10/28/2023 01:54:01 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:54:01 PM translated value 4 0
10/28/2023 01:54:01 PM moves exist attempting checking
10/28/2023 01:54:01 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:54:04 PM value meets requirements
10/28/2023 01:54:04 PM moves: []
10/28/2023 01:54:04 PM translated value 1 0
10/28/2023 01:54:04 PM Move(): attempting move() with (1, 0)
10/28/2023 01:54:04 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 01:54:04 PM Move(): move is possible
10/28/2023 01:54:04 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 01:54:04 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001EB6E7F85D0>
10/28/2023 01:54:04 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:54:04 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:54:04 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 01:54:04 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:54:04 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EB6E7EF150> (2, 0)
10/28/2023 01:54:04 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 01:54:04 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:54:04 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EB6E7EF390> (3, 0)
10/28/2023 01:54:04 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 01:54:04 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 01:54:04 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 01:54:04 PM Move(): moves and attacks registered
10/28/2023 01:54:05 PM value meets requirements
10/28/2023 01:54:05 PM moves: [(2, 0), (3, 0)]
10/28/2023 01:54:05 PM translated value 2 0
10/28/2023 01:54:05 PM moves exist attempting checking
10/28/2023 01:54:05 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 01:54:08 PM value meets requirements
10/28/2023 01:54:08 PM moves: []
10/28/2023 01:54:08 PM translated value 7 0
10/28/2023 01:54:08 PM Move(): attempting move() with (7, 0)
10/28/2023 01:54:08 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:54:08 PM Move(): move is possible
10/28/2023 01:54:08 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:54:08 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001EB6E7F8A90>
10/28/2023 01:54:08 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:22 PM Lanuching Main.py
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFD50> coordinates: (1, 0)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFD90> coordinates: (1, 1)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFDD0> coordinates: (1, 2)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFE50> coordinates: (1, 3)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFE90> coordinates: (1, 4)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFED0> coordinates: (1, 5)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFF10> coordinates: (1, 6)
10/28/2023 01:56:22 PM figure: <piece.Pawn object at 0x000002042F2DFF50> coordinates: (1, 7)
10/28/2023 01:56:24 PM value meets requirements
10/28/2023 01:56:24 PM moves: []
10/28/2023 01:56:24 PM translated value 6 0
10/28/2023 01:56:24 PM Move(): attempting move() with (6, 0)
10/28/2023 01:56:24 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:56:24 PM Move(): move is possible
10/28/2023 01:56:24 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:56:24 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002042F2DFF90>
10/28/2023 01:56:24 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:24 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:56:24 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:56:24 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:24 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002042F2DF450> (5, 0)
10/28/2023 01:56:24 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:56:24 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:24 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002042F2DF1D0> (4, 0)
10/28/2023 01:56:24 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:56:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:56:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:56:24 PM Move(): moves and attacks registered
10/28/2023 01:56:25 PM value meets requirements
10/28/2023 01:56:25 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:56:25 PM translated value 4 0
10/28/2023 01:56:25 PM moves exist attempting checking
10/28/2023 01:56:25 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:56:28 PM value meets requirements
10/28/2023 01:56:28 PM moves: []
10/28/2023 01:56:28 PM translated value 1 1
10/28/2023 01:56:28 PM Move(): attempting move() with (1, 1)
10/28/2023 01:56:28 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:56:28 PM Move(): move is possible
10/28/2023 01:56:28 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:56:28 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002042F2DFD90>
10/28/2023 01:56:28 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:28 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:56:28 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:56:28 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:28 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002042F2DED90> (2, 1)
10/28/2023 01:56:28 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:56:28 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:28 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002042F2DEFD0> (3, 1)
10/28/2023 01:56:28 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:56:28 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:56:28 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:56:28 PM Move(): moves and attacks registered
10/28/2023 01:56:30 PM value meets requirements
10/28/2023 01:56:30 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:56:30 PM translated value 2 1
10/28/2023 01:56:30 PM moves exist attempting checking
10/28/2023 01:56:30 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:56:31 PM value meets requirements
10/28/2023 01:56:31 PM moves: []
10/28/2023 01:56:31 PM translated value 7 0
10/28/2023 01:56:31 PM Move(): attempting move() with (7, 0)
10/28/2023 01:56:31 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:56:31 PM Move(): move is possible
10/28/2023 01:56:31 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:56:31 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000002042F2E8190>
10/28/2023 01:56:31 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:47 PM Lanuching Main.py
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FD50> coordinates: (1, 0)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FD90> coordinates: (1, 1)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FDD0> coordinates: (1, 2)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FE50> coordinates: (1, 3)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FE90> coordinates: (1, 4)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FED0> coordinates: (1, 5)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FF10> coordinates: (1, 6)
10/28/2023 01:56:47 PM figure: <piece.Pawn object at 0x00000253FE88FF50> coordinates: (1, 7)
10/28/2023 01:56:48 PM value meets requirements
10/28/2023 01:56:48 PM moves: []
10/28/2023 01:56:48 PM translated value 6 0
10/28/2023 01:56:48 PM Move(): attempting move() with (6, 0)
10/28/2023 01:56:48 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:56:48 PM Move(): move is possible
10/28/2023 01:56:48 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:56:48 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000253FE88FF90>
10/28/2023 01:56:48 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:48 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:56:48 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:56:48 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:48 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000253FE88F450> (5, 0)
10/28/2023 01:56:48 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:56:48 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:48 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000253FE88F1D0> (4, 0)
10/28/2023 01:56:48 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:56:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:56:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:56:48 PM Move(): moves and attacks registered
10/28/2023 01:56:49 PM value meets requirements
10/28/2023 01:56:49 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:56:49 PM translated value 4 0
10/28/2023 01:56:49 PM moves exist attempting checking
10/28/2023 01:56:49 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:56:51 PM value meets requirements
10/28/2023 01:56:51 PM moves: []
10/28/2023 01:56:51 PM translated value 1 1
10/28/2023 01:56:51 PM Move(): attempting move() with (1, 1)
10/28/2023 01:56:51 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:56:51 PM Move(): move is possible
10/28/2023 01:56:51 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:56:51 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000253FE88FD90>
10/28/2023 01:56:51 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:56:51 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:56:51 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:56:51 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:51 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000253FE88ED90> (2, 1)
10/28/2023 01:56:51 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:56:51 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:56:51 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000253FE88EFD0> (3, 1)
10/28/2023 01:56:51 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:56:51 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:56:51 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:56:51 PM Move(): moves and attacks registered
10/28/2023 01:56:53 PM value meets requirements
10/28/2023 01:56:53 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:56:53 PM translated value 2 1
10/28/2023 01:56:53 PM moves exist attempting checking
10/28/2023 01:56:53 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:56:54 PM value meets requirements
10/28/2023 01:56:54 PM moves: []
10/28/2023 01:56:54 PM translated value 7 0
10/28/2023 01:56:54 PM Move(): attempting move() with (7, 0)
10/28/2023 01:56:54 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:56:54 PM Move(): move is possible
10/28/2023 01:56:54 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:56:54 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x00000253FE898190>
10/28/2023 01:56:54 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:58:45 PM Lanuching Main.py
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FD50> coordinates: (1, 0)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FD90> coordinates: (1, 1)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FDD0> coordinates: (1, 2)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FE50> coordinates: (1, 3)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FE90> coordinates: (1, 4)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FED0> coordinates: (1, 5)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FF10> coordinates: (1, 6)
10/28/2023 01:58:45 PM figure: <piece.Pawn object at 0x0000018BE574FF50> coordinates: (1, 7)
10/28/2023 01:58:46 PM value meets requirements
10/28/2023 01:58:46 PM moves: []
10/28/2023 01:58:46 PM translated value 6 0
10/28/2023 01:58:46 PM Move(): attempting move() with (6, 0)
10/28/2023 01:58:46 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:58:46 PM Move(): move is possible
10/28/2023 01:58:46 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:58:46 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000018BE574FF90>
10/28/2023 01:58:46 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:58:46 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:58:46 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:58:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE574F450> (5, 0)
10/28/2023 01:58:46 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:58:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE574F1D0> (4, 0)
10/28/2023 01:58:46 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:58:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:58:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:58:46 PM Move(): moves and attacks registered
10/28/2023 01:58:47 PM value meets requirements
10/28/2023 01:58:47 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:58:47 PM translated value 4 0
10/28/2023 01:58:47 PM moves exist attempting checking
10/28/2023 01:58:47 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 01:58:48 PM value meets requirements
10/28/2023 01:58:48 PM moves: []
10/28/2023 01:58:48 PM translated value 1 0
10/28/2023 01:58:48 PM Move(): attempting move() with (1, 0)
10/28/2023 01:58:48 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 01:58:48 PM Move(): move is possible
10/28/2023 01:58:48 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 01:58:48 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000018BE574FD50>
10/28/2023 01:58:48 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:58:48 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:58:48 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 01:58:48 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:48 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE523DD90> (2, 0)
10/28/2023 01:58:48 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 01:58:48 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:48 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE574EF90> (3, 0)
10/28/2023 01:58:48 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 01:58:48 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 01:58:48 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 01:58:48 PM Move(): moves and attacks registered
10/28/2023 01:58:49 PM value meets requirements
10/28/2023 01:58:49 PM moves: [(2, 0), (3, 0)]
10/28/2023 01:58:49 PM translated value 2 0
10/28/2023 01:58:49 PM moves exist attempting checking
10/28/2023 01:58:49 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 01:58:51 PM value meets requirements
10/28/2023 01:58:51 PM moves: []
10/28/2023 01:58:51 PM translated value 7 0
10/28/2023 01:58:51 PM Move(): attempting move() with (7, 0)
10/28/2023 01:58:51 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 01:58:51 PM Move(): move is possible
10/28/2023 01:58:51 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 01:58:51 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x0000018BE5758190>
10/28/2023 01:58:51 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:58:51 PM RenderPossibleMoves(): moves and attacks after: ([(6, 0), (5, 0)], [])
10/28/2023 01:58:51 PM Move(): moves and attacks registered
10/28/2023 01:58:53 PM value meets requirements
10/28/2023 01:58:53 PM moves: [(6, 0), (5, 0)]
10/28/2023 01:58:53 PM translated value 5 0
10/28/2023 01:58:53 PM moves exist attempting checking
10/28/2023 01:58:53 PM found move (5, 0) in [(6, 0), (5, 0)]
10/28/2023 01:58:59 PM value meets requirements
10/28/2023 01:58:59 PM moves: []
10/28/2023 01:58:59 PM translated value 1 1
10/28/2023 01:58:59 PM Move(): attempting move() with (1, 1)
10/28/2023 01:58:59 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:58:59 PM Move(): move is possible
10/28/2023 01:58:59 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:58:59 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000018BE574FD90>
10/28/2023 01:58:59 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:58:59 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:58:59 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:58:59 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:59 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE574ED90> (2, 1)
10/28/2023 01:58:59 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:58:59 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:58:59 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000018BE574EFD0> (3, 1)
10/28/2023 01:58:59 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:58:59 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:58:59 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:58:59 PM Move(): moves and attacks registered
10/28/2023 01:59:01 PM value meets requirements
10/28/2023 01:59:01 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:59:01 PM translated value 2 1
10/28/2023 01:59:01 PM moves exist attempting checking
10/28/2023 01:59:01 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:59:03 PM value meets requirements
10/28/2023 01:59:03 PM moves: []
10/28/2023 01:59:03 PM translated value 5 0
10/28/2023 01:59:03 PM Move(): attempting move() with (5, 0)
10/28/2023 01:59:03 PM CheckIfMoveFromFieldIsPossible(): attempting with (5, 0) args
10/28/2023 01:59:03 PM Move(): move is possible
10/28/2023 01:59:03 PM RenderPossibleMoves(): choosen field: (5, 0)
10/28/2023 01:59:03 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x0000018BE5758190>
10/28/2023 01:59:03 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:03 PM RenderPossibleMoves(): moves and attacks after: ([], [])
10/28/2023 01:59:03 PM Move(): moves and attacks registered
10/28/2023 01:59:18 PM Lanuching Main.py
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FD50> coordinates: (1, 0)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FD90> coordinates: (1, 1)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FDD0> coordinates: (1, 2)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FE50> coordinates: (1, 3)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FE90> coordinates: (1, 4)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FED0> coordinates: (1, 5)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FF10> coordinates: (1, 6)
10/28/2023 01:59:18 PM figure: <piece.Pawn object at 0x0000027312B9FF50> coordinates: (1, 7)
10/28/2023 01:59:20 PM value meets requirements
10/28/2023 01:59:20 PM moves: []
10/28/2023 01:59:20 PM translated value 6 0
10/28/2023 01:59:20 PM Move(): attempting move() with (6, 0)
10/28/2023 01:59:20 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 01:59:20 PM Move(): move is possible
10/28/2023 01:59:20 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 01:59:20 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FF90>
10/28/2023 01:59:20 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:20 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:59:20 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 01:59:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9F450> (5, 0)
10/28/2023 01:59:20 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 01:59:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9F1D0> (4, 0)
10/28/2023 01:59:20 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 01:59:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 01:59:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 01:59:20 PM Move(): moves and attacks registered
10/28/2023 01:59:21 PM value meets requirements
10/28/2023 01:59:21 PM moves: [(5, 0), (4, 0)]
10/28/2023 01:59:21 PM translated value 5 0
10/28/2023 01:59:21 PM moves exist attempting checking
10/28/2023 01:59:21 PM found move (5, 0) in [(5, 0), (4, 0)]
10/28/2023 01:59:23 PM value meets requirements
10/28/2023 01:59:23 PM moves: []
10/28/2023 01:59:23 PM translated value 1 1
10/28/2023 01:59:23 PM Move(): attempting move() with (1, 1)
10/28/2023 01:59:23 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 01:59:23 PM Move(): move is possible
10/28/2023 01:59:23 PM RenderPossibleMoves(): choosen field: (1, 1)
10/28/2023 01:59:23 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FD90>
10/28/2023 01:59:23 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:23 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:59:23 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 01:59:23 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:23 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9ED90> (2, 1)
10/28/2023 01:59:23 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 01:59:23 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:23 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9EFD0> (3, 1)
10/28/2023 01:59:23 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 01:59:23 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 01:59:23 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 01:59:23 PM Move(): moves and attacks registered
10/28/2023 01:59:24 PM value meets requirements
10/28/2023 01:59:24 PM moves: [(2, 1), (3, 1)]
10/28/2023 01:59:24 PM translated value 2 1
10/28/2023 01:59:24 PM moves exist attempting checking
10/28/2023 01:59:24 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 01:59:25 PM value meets requirements
10/28/2023 01:59:25 PM moves: []
10/28/2023 01:59:25 PM translated value 5 0
10/28/2023 01:59:25 PM Move(): attempting move() with (5, 0)
10/28/2023 01:59:25 PM CheckIfMoveFromFieldIsPossible(): attempting with (5, 0) args
10/28/2023 01:59:25 PM Move(): move is possible
10/28/2023 01:59:25 PM RenderPossibleMoves(): choosen field: (5, 0)
10/28/2023 01:59:25 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FF90>
10/28/2023 01:59:25 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:25 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:59:25 PM Pawn Figure info: (5, 0, 'w', 'p')
10/28/2023 01:59:25 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:25 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9F1D0> (4, 0)
10/28/2023 01:59:25 PM Pawn (4, 0) is empty appended moves [(4, 0)]
10/28/2023 01:59:25 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:25 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9EF90> (3, 0)
10/28/2023 01:59:25 PM Pawn (3, 0) is empty appended moves [(4, 0), (3, 0)]
10/28/2023 01:59:25 PM Pawn ReturnPossibleMove(): returning values: ([(4, 0), (3, 0)], [])
10/28/2023 01:59:25 PM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (3, 0)], [])
10/28/2023 01:59:25 PM Move(): moves and attacks registered
10/28/2023 01:59:27 PM value meets requirements
10/28/2023 01:59:27 PM moves: [(4, 0), (3, 0)]
10/28/2023 01:59:27 PM translated value 3 0
10/28/2023 01:59:27 PM moves exist attempting checking
10/28/2023 01:59:27 PM found move (3, 0) in [(4, 0), (3, 0)]
10/28/2023 01:59:35 PM value meets requirements
10/28/2023 01:59:35 PM moves: []
10/28/2023 01:59:35 PM translated value 1 2
10/28/2023 01:59:35 PM Move(): attempting move() with (1, 2)
10/28/2023 01:59:35 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 2) args
10/28/2023 01:59:35 PM Move(): move is possible
10/28/2023 01:59:35 PM RenderPossibleMoves(): choosen field: (1, 2)
10/28/2023 01:59:35 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FDD0>
10/28/2023 01:59:35 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:35 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:59:35 PM Pawn Figure info: (1, 2, 'b', 'p')
10/28/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9EDD0> (2, 2)
10/28/2023 01:59:35 PM Pawn (2, 2) is empty appended moves [(2, 2)]
10/28/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9F010> (3, 2)
10/28/2023 01:59:35 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
10/28/2023 01:59:35 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
10/28/2023 01:59:35 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
10/28/2023 01:59:35 PM Move(): moves and attacks registered
10/28/2023 01:59:37 PM value meets requirements
10/28/2023 01:59:37 PM moves: [(2, 2), (3, 2)]
10/28/2023 01:59:37 PM translated value 2 2
10/28/2023 01:59:37 PM moves exist attempting checking
10/28/2023 01:59:37 PM found move (2, 2) in [(2, 2), (3, 2)]
10/28/2023 01:59:40 PM value meets requirements
10/28/2023 01:59:40 PM moves: []
10/28/2023 01:59:40 PM translated value 3 0
10/28/2023 01:59:40 PM Move(): attempting move() with (3, 0)
10/28/2023 01:59:40 PM CheckIfMoveFromFieldIsPossible(): attempting with (3, 0) args
10/28/2023 01:59:40 PM Move(): move is possible
10/28/2023 01:59:40 PM RenderPossibleMoves(): choosen field: (3, 0)
10/28/2023 01:59:40 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FF90>
10/28/2023 01:59:40 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 01:59:40 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 01:59:40 PM Pawn Figure info: (3, 0, 'w', 'p')
10/28/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002731268DD90> (2, 0)
10/28/2023 01:59:40 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: False
10/28/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312673550> (1, 0)
10/28/2023 01:59:40 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (2, 1)], [])
10/28/2023 01:59:40 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (2, 1)], [])
10/28/2023 01:59:40 PM Move(): moves and attacks registered
10/28/2023 01:59:45 PM value meets requirements
10/28/2023 01:59:45 PM moves: [(2, 0), (2, 1)]
10/28/2023 01:59:45 PM translated value 2 1
10/28/2023 01:59:45 PM moves exist attempting checking
10/28/2023 01:59:45 PM found move (2, 1) in [(2, 0), (2, 1)]
10/28/2023 02:00:01 PM value meets requirements
10/28/2023 02:00:01 PM moves: []
10/28/2023 02:00:01 PM translated value 7 0
10/28/2023 02:00:01 PM Move(): attempting move() with (7, 0)
10/28/2023 02:00:01 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 02:00:01 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 02:00:05 PM value meets requirements
10/28/2023 02:00:05 PM moves: []
10/28/2023 02:00:05 PM translated value 1 0
10/28/2023 02:00:05 PM Move(): attempting move() with (1, 0)
10/28/2023 02:00:05 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 02:00:05 PM Move(): move is possible
10/28/2023 02:00:05 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 02:00:05 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027312B9FD50>
10/28/2023 02:00:05 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:00:05 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 02:00:05 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 02:00:05 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:00:05 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002731268DD90> (2, 0)
10/28/2023 02:00:05 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 02:00:05 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:00:05 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027312B9EF90> (3, 0)
10/28/2023 02:00:05 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 02:00:05 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0), (2, 1)], [])
10/28/2023 02:00:05 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0), (2, 1)], [])
10/28/2023 02:00:05 PM Move(): moves and attacks registered
10/28/2023 02:00:09 PM value meets requirements
10/28/2023 02:00:09 PM moves: [(2, 0), (3, 0), (2, 1)]
10/28/2023 02:00:09 PM translated value 2 1
10/28/2023 02:00:09 PM moves exist attempting checking
10/28/2023 02:00:09 PM found move (2, 1) in [(2, 0), (3, 0), (2, 1)]
10/28/2023 02:00:13 PM value meets requirements
10/28/2023 02:00:13 PM moves: []
10/28/2023 02:00:13 PM translated value 7 0
10/28/2023 02:00:13 PM Move(): attempting move() with (7, 0)
10/28/2023 02:00:13 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 02:00:13 PM Move(): move is possible
10/28/2023 02:00:13 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 02:00:13 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x0000027312BA8190>
10/28/2023 02:00:13 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:03:31 PM Lanuching Main.py
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FC50> coordinates: (1, 0)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FC90> coordinates: (1, 1)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FCD0> coordinates: (1, 2)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FD50> coordinates: (1, 3)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FD90> coordinates: (1, 4)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FDD0> coordinates: (1, 5)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FE10> coordinates: (1, 6)
10/28/2023 02:03:31 PM figure: <piece.Pawn object at 0x000002A012F6FE50> coordinates: (1, 7)
10/28/2023 02:03:32 PM value meets requirements
10/28/2023 02:03:32 PM moves: []
10/28/2023 02:03:32 PM translated value 6 0
10/28/2023 02:03:32 PM Move(): attempting move() with (6, 0)
10/28/2023 02:03:32 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 02:03:32 PM Move(): move is possible
10/28/2023 02:03:32 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 02:03:32 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002A012F6FE90>
10/28/2023 02:03:32 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:03:32 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 02:03:32 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 02:03:32 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:03:32 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A012F6F350> (5, 0)
10/28/2023 02:03:32 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 02:03:32 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:03:32 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A012F6F0D0> (4, 0)
10/28/2023 02:03:32 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 02:03:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 02:03:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 02:03:32 PM Move(): moves and attacks registered
10/28/2023 02:03:33 PM value meets requirements
10/28/2023 02:03:33 PM moves: [(5, 0), (4, 0)]
10/28/2023 02:03:33 PM translated value 4 0
10/28/2023 02:03:33 PM moves exist attempting checking
10/28/2023 02:03:33 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 02:03:37 PM value meets requirements
10/28/2023 02:03:37 PM moves: []
10/28/2023 02:03:37 PM translated value 1 0
10/28/2023 02:03:37 PM Move(): attempting move() with (1, 0)
10/28/2023 02:03:37 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 02:03:37 PM Move(): move is possible
10/28/2023 02:03:37 PM RenderPossibleMoves(): choosen field: (1, 0)
10/28/2023 02:03:37 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002A012F6FC50>
10/28/2023 02:03:37 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:03:37 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 02:03:37 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 02:03:37 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:03:37 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A012A5DD90> (2, 0)
10/28/2023 02:03:37 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 02:03:37 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:03:37 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A012F6EE90> (3, 0)
10/28/2023 02:03:37 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 02:03:37 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 02:03:37 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 02:03:37 PM Move(): moves and attacks registered
10/28/2023 02:03:38 PM value meets requirements
10/28/2023 02:03:38 PM moves: [(2, 0), (3, 0)]
10/28/2023 02:03:38 PM translated value 2 0
10/28/2023 02:03:38 PM moves exist attempting checking
10/28/2023 02:03:38 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 02:03:40 PM value meets requirements
10/28/2023 02:03:40 PM moves: []
10/28/2023 02:03:40 PM translated value 7 0
10/28/2023 02:03:40 PM Move(): attempting move() with (7, 0)
10/28/2023 02:03:40 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 02:03:40 PM Move(): move is possible
10/28/2023 02:03:40 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 02:03:40 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000002A012F78090>
10/28/2023 02:03:40 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:03:40 PM RenderPossibleMoves(): moves and attacks after: ([(6, 0), (5, 0)], [])
10/28/2023 02:03:40 PM Move(): moves and attacks registered
10/28/2023 02:03:42 PM value meets requirements
10/28/2023 02:03:42 PM moves: [(6, 0), (5, 0)]
10/28/2023 02:03:42 PM translated value 5 0
10/28/2023 02:03:42 PM moves exist attempting checking
10/28/2023 02:03:42 PM found move (5, 0) in [(6, 0), (5, 0)]
10/28/2023 02:03:46 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:03:53 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:03:58 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:04:01 PM value meets requirements
10/28/2023 02:04:01 PM moves: []
10/28/2023 02:04:01 PM translated value 1 0
10/28/2023 02:04:01 PM Move(): attempting move() with (1, 0)
10/28/2023 02:04:01 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 02:04:01 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 02:04:11 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:04:15 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:04:33 PM Lanuching Main.py
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD93D0> coordinates: (1, 0)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD9410> coordinates: (1, 1)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD9450> coordinates: (1, 2)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD94D0> coordinates: (1, 3)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD9510> coordinates: (1, 4)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD9550> coordinates: (1, 5)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD9590> coordinates: (1, 6)
10/28/2023 02:04:33 PM figure: <piece.Pawn object at 0x00000178F1DD95D0> coordinates: (1, 7)
10/28/2023 02:04:33 PM (0, 0)
10/28/2023 02:05:08 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:05:13 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:05:23 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:05:51 PM Lanuching Main.py
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8410> coordinates: (1, 0)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8450> coordinates: (1, 1)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8490> coordinates: (1, 2)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8510> coordinates: (1, 3)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8550> coordinates: (1, 4)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8590> coordinates: (1, 5)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE85D0> coordinates: (1, 6)
10/28/2023 02:05:51 PM figure: <piece.Pawn object at 0x000002323CEE8610> coordinates: (1, 7)
10/28/2023 02:05:51 PM (0, 0)
10/28/2023 02:05:53 PM inputed value: a8
10/28/2023 02:05:53 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:06:00 PM inputed value: b8
10/28/2023 02:06:00 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:08:20 PM Lanuching Main.py
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708410> coordinates: (1, 0)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708450> coordinates: (1, 1)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708490> coordinates: (1, 2)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708510> coordinates: (1, 3)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708550> coordinates: (1, 4)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708590> coordinates: (1, 5)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F7085D0> coordinates: (1, 6)
10/28/2023 02:08:20 PM figure: <piece.Pawn object at 0x000002220F708610> coordinates: (1, 7)
10/28/2023 02:08:20 PM (0, 0)
10/28/2023 02:08:22 PM inputed value: a8
10/28/2023 02:08:22 PM value meets requirements
10/28/2023 02:08:22 PM moves: []
10/28/2023 02:08:22 PM translated value 0 0
10/28/2023 02:08:22 PM Move(): attempting move() with (0, 0)
10/28/2023 02:08:22 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 0) args
10/28/2023 02:08:22 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 02:08:25 PM inputed value: a8
10/28/2023 02:08:25 PM value meets requirements
10/28/2023 02:08:25 PM moves: []
10/28/2023 02:08:25 PM translated value 0 0
10/28/2023 02:08:25 PM Move(): attempting move() with (0, 0)
10/28/2023 02:08:25 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 0) args
10/28/2023 02:08:25 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 02:09:54 PM Lanuching Main.py
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC490> coordinates: (1, 0)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC4D0> coordinates: (1, 1)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC510> coordinates: (1, 2)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC590> coordinates: (1, 3)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC5D0> coordinates: (1, 4)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC610> coordinates: (1, 5)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC650> coordinates: (1, 6)
10/28/2023 02:09:54 PM figure: <piece.Pawn object at 0x000001BFDA4DC690> coordinates: (1, 7)
10/28/2023 02:09:54 PM (0, 0)
10/28/2023 02:09:55 PM inputed value: a8
10/28/2023 02:09:55 PM value meets requirements
10/28/2023 02:09:55 PM moves: []
10/28/2023 02:09:55 PM translated value 0 0
10/28/2023 02:09:55 PM Move(): attempting move() with (0, 0)
10/28/2023 02:09:55 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 0) args
10/28/2023 02:09:55 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 02:10:03 PM inputed value: a8]
10/28/2023 02:10:03 PM value too long
10/28/2023 02:10:06 PM inputed value: a8
10/28/2023 02:10:06 PM value meets requirements
10/28/2023 02:10:06 PM moves: []
10/28/2023 02:10:06 PM translated value 0 0
10/28/2023 02:10:06 PM Move(): attempting move() with (0, 0)
10/28/2023 02:10:06 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 0) args
10/28/2023 02:10:06 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 02:10:26 PM inputed value: a1
10/28/2023 02:10:26 PM value meets requirements
10/28/2023 02:10:26 PM moves: []
10/28/2023 02:10:26 PM translated value 7 0
10/28/2023 02:10:26 PM Move(): attempting move() with (7, 0)
10/28/2023 02:10:26 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 02:10:26 PM Move(): move is possible
10/28/2023 02:10:26 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 02:10:26 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001BFDA4DC890>
10/28/2023 02:10:26 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:10:26 PM RenderPossibleMoves(): moves and attacks after: ([], [])
10/28/2023 02:10:26 PM Move(): moves and attacks registered
10/28/2023 02:10:27 PM inputed value: a1
10/28/2023 02:10:27 PM value meets requirements
10/28/2023 02:10:27 PM moves: []
10/28/2023 02:10:27 PM translated value 7 0
10/28/2023 02:10:27 PM inputed value: a1
10/28/2023 02:10:27 PM value meets requirements
10/28/2023 02:10:27 PM moves: []
10/28/2023 02:10:27 PM translated value 7 0
10/28/2023 02:10:28 PM inputed value: a1
10/28/2023 02:10:28 PM value meets requirements
10/28/2023 02:10:28 PM moves: []
10/28/2023 02:10:28 PM translated value 7 0
10/28/2023 02:10:28 PM inputed value: a1
10/28/2023 02:10:28 PM value meets requirements
10/28/2023 02:10:28 PM moves: []
10/28/2023 02:10:28 PM translated value 7 0
10/28/2023 02:10:28 PM inputed value: a1
10/28/2023 02:10:28 PM value meets requirements
10/28/2023 02:10:28 PM moves: []
10/28/2023 02:10:28 PM translated value 7 0
10/28/2023 02:10:28 PM inputed value: a1
10/28/2023 02:10:28 PM value meets requirements
10/28/2023 02:10:28 PM moves: []
10/28/2023 02:10:28 PM translated value 7 0
10/28/2023 02:10:29 PM inputed value: a1
10/28/2023 02:10:29 PM value meets requirements
10/28/2023 02:10:29 PM moves: []
10/28/2023 02:10:29 PM translated value 7 0
10/28/2023 02:10:29 PM inputed value: a1
10/28/2023 02:10:29 PM value meets requirements
10/28/2023 02:10:29 PM moves: []
10/28/2023 02:10:29 PM translated value 7 0
10/28/2023 02:10:29 PM inputed value: a1
10/28/2023 02:10:29 PM value meets requirements
10/28/2023 02:10:29 PM moves: []
10/28/2023 02:10:29 PM translated value 7 0
10/28/2023 02:10:29 PM inputed value: a1
10/28/2023 02:10:29 PM value meets requirements
10/28/2023 02:10:29 PM moves: []
10/28/2023 02:10:29 PM translated value 7 0
10/28/2023 02:10:30 PM inputed value: a1
10/28/2023 02:10:30 PM value meets requirements
10/28/2023 02:10:30 PM moves: []
10/28/2023 02:10:30 PM translated value 7 0
10/28/2023 02:11:18 PM inputed value: b1
10/28/2023 02:11:18 PM value meets requirements
10/28/2023 02:11:18 PM moves: []
10/28/2023 02:11:18 PM translated value 7 1
10/28/2023 02:11:19 PM inputed value: b2
10/28/2023 02:11:19 PM value meets requirements
10/28/2023 02:11:19 PM moves: []
10/28/2023 02:11:19 PM translated value 6 1
10/28/2023 02:11:21 PM inputed value: b2
10/28/2023 02:11:21 PM value meets requirements
10/28/2023 02:11:21 PM moves: []
10/28/2023 02:11:21 PM translated value 6 1
10/28/2023 02:11:26 PM inputed value: a2
10/28/2023 02:11:26 PM value meets requirements
10/28/2023 02:11:26 PM moves: []
10/28/2023 02:11:26 PM translated value 6 0
10/28/2023 02:11:27 PM inputed value: a4
10/28/2023 02:11:27 PM value meets requirements
10/28/2023 02:11:27 PM moves: []
10/28/2023 02:11:27 PM translated value 4 0
10/28/2023 02:11:29 PM inputed value: ac
10/28/2023 02:11:29 PM inputed value is out of chessboard possbile indexes
10/28/2023 02:11:32 PM inputed value: a2
10/28/2023 02:11:32 PM value meets requirements
10/28/2023 02:11:32 PM moves: []
10/28/2023 02:11:32 PM translated value 6 0
10/28/2023 02:11:34 PM Lanuching Main.py
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C490> coordinates: (1, 0)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C4D0> coordinates: (1, 1)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C510> coordinates: (1, 2)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C590> coordinates: (1, 3)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C5D0> coordinates: (1, 4)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C610> coordinates: (1, 5)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C650> coordinates: (1, 6)
10/28/2023 02:11:34 PM figure: <piece.Pawn object at 0x000002562378C690> coordinates: (1, 7)
10/28/2023 02:11:34 PM (0, 0)
10/28/2023 02:11:34 PM inputed value: a2
10/28/2023 02:11:34 PM value meets requirements
10/28/2023 02:11:34 PM moves: []
10/28/2023 02:11:34 PM translated value 6 0
10/28/2023 02:11:34 PM Move(): attempting move() with (6, 0)
10/28/2023 02:11:34 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 02:11:34 PM Move(): move is possible
10/28/2023 02:11:34 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 02:11:34 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002562378C6D0>
10/28/2023 02:11:34 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:11:34 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 02:11:34 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 02:11:34 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:11:34 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002562377BB50> (5, 0)
10/28/2023 02:11:34 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 02:11:34 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:11:34 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002562377B8D0> (4, 0)
10/28/2023 02:11:34 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 02:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 02:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 02:11:34 PM Move(): moves and attacks registered
10/28/2023 02:11:38 PM Lanuching Main.py
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479450> coordinates: (1, 0)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479490> coordinates: (1, 1)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x00000230824794D0> coordinates: (1, 2)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479550> coordinates: (1, 3)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479590> coordinates: (1, 4)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x00000230824795D0> coordinates: (1, 5)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479610> coordinates: (1, 6)
10/28/2023 02:11:38 PM figure: <piece.Pawn object at 0x0000023082479650> coordinates: (1, 7)
10/28/2023 02:11:38 PM (0, 0)
10/28/2023 02:11:40 PM inputed value: a`1
10/28/2023 02:11:40 PM value too long
10/28/2023 02:11:42 PM inputed value: a2
10/28/2023 02:11:42 PM value meets requirements
10/28/2023 02:11:42 PM moves: []
10/28/2023 02:11:42 PM translated value 6 0
10/28/2023 02:11:42 PM Move(): attempting move() with (6, 0)
10/28/2023 02:11:42 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 02:11:42 PM Move(): move is possible
10/28/2023 02:11:42 PM RenderPossibleMoves(): choosen field: (6, 0)
10/28/2023 02:11:42 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000023082479690>
10/28/2023 02:11:42 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:11:42 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 02:11:42 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 02:11:42 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:11:42 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000023082478B50> (5, 0)
10/28/2023 02:11:42 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 02:11:42 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 02:11:42 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000230824788D0> (4, 0)
10/28/2023 02:11:42 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 02:11:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 02:11:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 02:11:42 PM Move(): moves and attacks registered
10/28/2023 02:11:44 PM inputed value: a3
10/28/2023 02:11:44 PM value meets requirements
10/28/2023 02:11:44 PM moves: [(5, 0), (4, 0)]
10/28/2023 02:11:44 PM translated value 5 0
10/28/2023 02:11:44 PM moves exist attempting checking
10/28/2023 02:11:44 PM found move (5, 0) in [(5, 0), (4, 0)]
10/28/2023 02:11:47 PM inputed value: a8
10/28/2023 02:11:47 PM value meets requirements
10/28/2023 02:11:47 PM moves: []
10/28/2023 02:11:47 PM translated value 0 0
10/28/2023 02:11:47 PM Move(): attempting move() with (0, 0)
10/28/2023 02:11:47 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 0) args
10/28/2023 02:11:47 PM Move(): move is possible
10/28/2023 02:11:47 PM RenderPossibleMoves(): choosen field: (0, 0)
10/28/2023 02:11:47 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x0000023082479210>
10/28/2023 02:11:47 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:11:47 PM RenderPossibleMoves(): moves and attacks after: ([], [])
10/28/2023 02:11:47 PM Move(): moves and attacks registered
10/28/2023 02:11:48 PM inputed value: a7
10/28/2023 02:11:48 PM value meets requirements
10/28/2023 02:11:48 PM moves: []
10/28/2023 02:11:48 PM translated value 1 0
10/28/2023 02:15:34 PM Lanuching Main.py
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C3D0> coordinates: (1, 0)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C410> coordinates: (1, 1)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C450> coordinates: (1, 2)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C4D0> coordinates: (1, 3)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C510> coordinates: (1, 4)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C550> coordinates: (1, 5)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C590> coordinates: (1, 6)
10/28/2023 02:15:34 PM figure: <piece.Pawn object at 0x000001EA5761C5D0> coordinates: (1, 7)
10/28/2023 02:15:34 PM (0, 0)
10/28/2023 02:15:36 PM inputed value: a1
10/28/2023 02:15:36 PM value meets requirements
10/28/2023 02:15:36 PM moves: []
10/28/2023 02:15:36 PM translated value 7 0
10/28/2023 02:15:36 PM Move(): attempting move() with (7, 0)
10/28/2023 02:15:36 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 02:15:36 PM Move(): move is possible
10/28/2023 02:15:36 PM RenderPossibleMoves(): choosen field: (7, 0)
10/28/2023 02:15:36 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001EA5761C7D0>
10/28/2023 02:15:36 PM RenderPossibleMoves(): moves and attacks before: ([], [])
10/28/2023 02:15:36 PM RenderPossibleMoves(): moves and attacks after: ([], [])
10/28/2023 02:15:36 PM Move(): moves and attacks registered
10/28/2023 02:15:38 PM inputed value: a2
10/28/2023 02:15:38 PM value meets requirements
10/28/2023 02:15:38 PM moves: []
10/28/2023 02:15:38 PM translated value 6 0
10/28/2023 02:37:12 PM inputed value: & C:/Users/Sak/AppData/Local/Programs/Python/Python311/python.exe
10/28/2023 02:37:12 PM value too long
10/28/2023 02:37:14 PM inputed value: codes = {}
10/28/2023 02:37:14 PM value too long
10/28/2023 03:43:39 PM Lanuching Main.py
10/28/2023 03:43:39 PM (0, 0)
10/28/2023 03:44:07 PM Lanuching Main.py
10/28/2023 03:44:07 PM (0, 0)
10/28/2023 03:44:09 PM CheckField(): attempting with (6, 0)
10/28/2023 03:44:09 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:44:09 PM CheckField(): move is possible
10/28/2023 03:44:09 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000020C7CECFE10> moves and attacks before: ([], [])
10/28/2023 03:44:09 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:44:09 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:44:09 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:44:09 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000020C7CECF310> (5, 0)
10/28/2023 03:44:09 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:44:09 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:44:09 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000020C7CECF090> (4, 0)
10/28/2023 03:44:09 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:44:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:44:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:44:09 PM CheckField(): moves and attacks registered
10/28/2023 03:44:09 PM CheckField(): there are possible moves from that location
10/28/2023 03:44:37 PM CheckField(): attempting with (4, 0)
10/28/2023 03:44:37 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:44:37 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:44:46 PM CheckField(): attempting with (6, 0)
10/28/2023 03:44:46 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:44:46 PM CheckField(): move is possible
10/28/2023 03:44:46 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000020C7CECFE10> moves and attacks before: ([(5, 0), (4, 0)], [])
10/28/2023 03:44:46 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:44:46 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:44:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:44:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000020C7CECF310> (5, 0)
10/28/2023 03:44:46 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:44:46 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:44:46 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000020C7CECF090> (4, 0)
10/28/2023 03:44:46 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:44:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:44:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:44:46 PM CheckField(): moves and attacks registered
10/28/2023 03:44:46 PM CheckField(): there are possible moves from that location
10/28/2023 03:45:09 PM Lanuching Main.py
10/28/2023 03:45:09 PM (0, 0)
10/28/2023 03:45:12 PM CheckField(): attempting with (6, 0)
10/28/2023 03:45:12 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:45:12 PM CheckField(): move is possible
10/28/2023 03:45:12 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001938C2D9610> moves and attacks before: ([], [])
10/28/2023 03:45:12 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:45:12 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:45:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:45:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001938C2D8B50> (5, 0)
10/28/2023 03:45:12 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:45:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:45:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001938C2D88D0> (4, 0)
10/28/2023 03:45:12 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:45:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:45:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:45:12 PM CheckField(): moves and attacks registered
10/28/2023 03:45:12 PM CheckField(): there are possible moves from that location
10/28/2023 03:45:49 PM Lanuching Main.py
10/28/2023 03:45:49 PM (0, 0)
10/28/2023 03:45:50 PM CheckField(): attempting with (6, 0)
10/28/2023 03:45:50 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:45:50 PM CheckField(): move is possible
10/28/2023 03:45:50 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001ABBA4BFE50> moves and attacks before: ([], [])
10/28/2023 03:45:50 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:45:50 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:45:50 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:45:50 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001ABBA4BF350> (5, 0)
10/28/2023 03:45:50 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:45:50 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:45:50 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001ABBA4BF0D0> (4, 0)
10/28/2023 03:45:50 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:45:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:45:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:45:50 PM CheckField(): moves and attacks registered
10/28/2023 03:45:50 PM CheckField(): there are possible moves from that location
10/28/2023 03:45:52 PM CheckField(): attempting with (4, 0)
10/28/2023 03:45:52 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:45:52 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:45:55 PM CheckField(): attempting with (4, 0)
10/28/2023 03:45:55 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:45:55 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:47:08 PM Lanuching Main.py
10/28/2023 03:47:08 PM (0, 0)
10/28/2023 03:47:12 PM CheckField(): attempting with (6, 0)
10/28/2023 03:47:12 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:47:12 PM CheckField(): move is possible
10/28/2023 03:47:12 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002519CA09610> moves and attacks before: ([], [])
10/28/2023 03:47:12 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:47:12 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:47:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:47:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002519CA08B50> (5, 0)
10/28/2023 03:47:12 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:47:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:47:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002519CA088D0> (4, 0)
10/28/2023 03:47:12 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:47:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:47:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:47:12 PM CheckField(): moves and attacks registered
10/28/2023 03:47:12 PM CheckField(): there are possible moves from that location
10/28/2023 03:48:03 PM CheckField(): attempting with (4, 0)
10/28/2023 03:48:03 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:48:03 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:49:05 PM Lanuching Main.py
10/28/2023 03:49:05 PM (0, 0)
10/28/2023 03:49:07 PM CheckField(): attempting with (6, 0)
10/28/2023 03:49:07 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:49:07 PM CheckField(): move is possible
10/28/2023 03:49:07 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001915B04FE50> moves and attacks before: ([], [])
10/28/2023 03:49:07 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:49:07 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:49:07 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:07 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04F350> (5, 0)
10/28/2023 03:49:07 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:49:07 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:07 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04F0D0> (4, 0)
10/28/2023 03:49:07 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:49:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:49:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:49:07 PM CheckField(): moves and attacks registered
10/28/2023 03:49:07 PM CheckField(): there are possible moves from that location
10/28/2023 03:49:07 PM Move(): attempting move() with (6, 0)
10/28/2023 03:49:09 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 03:49:13 PM CheckField(): attempting with (1, 0)
10/28/2023 03:49:13 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 03:49:13 PM CheckField(): move is possible
10/28/2023 03:49:13 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001915B04FC50> moves and attacks before: ([], [])
10/28/2023 03:49:13 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:49:13 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 03:49:13 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:13 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04EC50> (2, 0)
10/28/2023 03:49:13 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 03:49:13 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:13 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04EE90> (3, 0)
10/28/2023 03:49:13 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 03:49:13 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 03:49:13 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 03:49:13 PM CheckField(): moves and attacks registered
10/28/2023 03:49:13 PM CheckField(): there are possible moves from that location
10/28/2023 03:49:13 PM Move(): attempting move() with (1, 0)
10/28/2023 03:49:15 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 03:49:16 PM CheckField(): attempting with (7, 0)
10/28/2023 03:49:16 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 03:49:16 PM CheckField(): move is possible
10/28/2023 03:49:16 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001915B05C090> moves and attacks before: ([], [])
10/28/2023 03:49:16 PM RenderPossibleMoves(): moves and attacks after: ([(6, 0), (5, 0)], [])
10/28/2023 03:49:16 PM CheckField(): moves and attacks registered
10/28/2023 03:49:16 PM CheckField(): there are possible moves from that location
10/28/2023 03:49:16 PM Move(): attempting move() with (7, 0)
10/28/2023 03:49:17 PM found move (5, 0) in [(6, 0), (5, 0)]
10/28/2023 03:49:21 PM CheckField(): attempting with (1, 1)
10/28/2023 03:49:21 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 03:49:21 PM CheckField(): move is possible
10/28/2023 03:49:21 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001915B04FC90> moves and attacks before: ([], [])
10/28/2023 03:49:21 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:49:21 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 03:49:21 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:21 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04EC90> (2, 1)
10/28/2023 03:49:21 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 03:49:21 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:49:21 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001915B04EED0> (3, 1)
10/28/2023 03:49:21 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 03:49:21 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 03:49:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 03:49:21 PM CheckField(): moves and attacks registered
10/28/2023 03:49:21 PM CheckField(): there are possible moves from that location
10/28/2023 03:49:21 PM Move(): attempting move() with (1, 1)
10/28/2023 03:49:23 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 03:49:25 PM CheckField(): attempting with (5, 0)
10/28/2023 03:49:25 PM CheckIfMoveFromFieldIsPossible(): attempting with (5, 0) args
10/28/2023 03:49:25 PM CheckField(): move is possible
10/28/2023 03:49:25 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001915B05C090> moves and attacks before: ([], [])
10/28/2023 03:49:25 PM RenderPossibleMoves(): moves and attacks after: ([(6, 0), (7, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7)], [])
10/28/2023 03:49:25 PM CheckField(): moves and attacks registered
10/28/2023 03:49:25 PM CheckField(): there are possible moves from that location
10/28/2023 03:49:25 PM Move(): attempting move() with (5, 0)
10/28/2023 03:49:33 PM did not found move (4, 3) in [(6, 0), (7, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7)]
10/28/2023 03:49:36 PM found move (5, 3) in [(6, 0), (7, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7)]
10/28/2023 03:50:16 PM CheckField(): attempting with (6, 0)
10/28/2023 03:50:16 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:50:16 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:50:30 PM Lanuching Main.py
10/28/2023 03:50:30 PM (0, 0)
10/28/2023 03:50:32 PM CheckField(): attempting with (4, 0)
10/28/2023 03:50:32 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:50:32 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:50:37 PM value too long
10/28/2023 03:53:31 PM Lanuching Main.py
10/28/2023 03:53:31 PM (0, 0)
10/28/2023 03:53:32 PM value too long
10/28/2023 03:53:33 PM CheckField(): attempting with (4, 0)
10/28/2023 03:53:33 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:53:33 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:53:36 PM value too long
10/28/2023 03:53:38 PM CheckField(): attempting with (6, 0)
10/28/2023 03:53:38 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 03:53:38 PM CheckField(): move is possible
10/28/2023 03:53:38 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002129E68FF10> moves and attacks before: ([], [])
10/28/2023 03:53:38 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 03:53:38 PM Pawn Figure info: (6, 0, 'w', 'p')
10/28/2023 03:53:38 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:53:38 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002129E68F450> (5, 0)
10/28/2023 03:53:38 PM Pawn (5, 0) is empty appended moves [(5, 0)]
10/28/2023 03:53:38 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 03:53:38 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002129E68F1D0> (4, 0)
10/28/2023 03:53:38 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/28/2023 03:53:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/28/2023 03:53:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/28/2023 03:53:38 PM CheckField(): moves and attacks registered
10/28/2023 03:53:38 PM CheckField(): there are possible moves from that location
10/28/2023 03:53:38 PM Move(): attempting move() with (6, 0)
10/28/2023 03:53:39 PM found move (4, 0) in [(5, 0), (4, 0)]
10/28/2023 03:54:16 PM CheckField(): attempting with (5, 0)
10/28/2023 03:54:16 PM CheckIfMoveFromFieldIsPossible(): attempting with (5, 0) args
10/28/2023 03:54:16 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 03:54:42 PM Lanuching Main.py
10/28/2023 03:54:42 PM (0, 0)
10/28/2023 03:54:44 PM CheckField(): attempting with (4, 0)
10/28/2023 03:54:44 PM CheckIfMoveFromFieldIsPossible(): attempting with (4, 0) args
10/28/2023 03:54:46 PM CheckIfMoveFromFieldIsPossible(): choosen field is empty
10/28/2023 04:19:24 PM Lanuching Main.py
10/28/2023 04:19:24 PM (0, 0)
10/28/2023 04:19:29 PM CheckField(): attempting with (7, 1)
10/28/2023 04:19:29 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 1) args
10/28/2023 04:19:29 PM CheckField(): move is possible
10/28/2023 04:19:29 PM RenderPossibleMoves(): choosen figure: <piece.Knight object at 0x000002A44B9B02D0> moves and attacks before: ([], [])
10/28/2023 04:19:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
10/28/2023 04:19:29 PM CheckField(): moves and attacks registered
10/28/2023 04:19:29 PM CheckField(): there are possible moves from that location
10/28/2023 04:19:29 PM Move(): attempting move() with (7, 1)
10/28/2023 04:19:34 PM found move (5, 2) in [(5, 2), (5, 0)]
10/28/2023 04:22:16 PM CheckField(): attempting with (1, 0)
10/28/2023 04:22:16 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 04:22:16 PM CheckField(): move is possible
10/28/2023 04:22:16 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002A44B9A3E50> moves and attacks before: ([], [])
10/28/2023 04:22:16 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:22:16 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 04:22:16 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:22:16 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A44B9A2E90> (2, 0)
10/28/2023 04:22:16 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 04:22:16 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:22:16 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002A44B9A30D0> (3, 0)
10/28/2023 04:22:16 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 04:22:16 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 04:22:16 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 04:22:16 PM CheckField(): moves and attacks registered
10/28/2023 04:22:16 PM CheckField(): there are possible moves from that location
10/28/2023 04:22:16 PM Move(): attempting move() with (1, 0)
10/28/2023 04:22:18 PM found move (3, 0) in [(2, 0), (3, 0)]
10/28/2023 04:22:21 PM CheckField(): attempting with (7, 2)
10/28/2023 04:22:21 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:22:21 PM CheckField(): move is possible
10/28/2023 04:22:21 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000002A44B9B0310> moves and attacks before: ([], [])
10/28/2023 04:22:44 PM Lanuching Main.py
10/28/2023 04:22:44 PM (0, 0)
10/28/2023 04:22:51 PM CheckField(): attempting with (6, 1)
10/28/2023 04:22:51 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:22:51 PM CheckField(): move is possible
10/28/2023 04:22:51 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000251D6663FD0> moves and attacks before: ([], [])
10/28/2023 04:22:51 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:22:51 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000251D6663510> (5, 1)
10/28/2023 04:22:51 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000251D6663290> (4, 1)
10/28/2023 04:22:51 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:22:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:22:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:22:51 PM CheckField(): moves and attacks registered
10/28/2023 04:22:51 PM CheckField(): there are possible moves from that location
10/28/2023 04:22:51 PM Move(): attempting move() with (6, 1)
10/28/2023 04:22:52 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:23:30 PM Lanuching Main.py
10/28/2023 04:23:30 PM (0, 0)
10/28/2023 04:23:34 PM CheckField(): attempting with (6, 1)
10/28/2023 04:23:34 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:23:34 PM CheckField(): move is possible
10/28/2023 04:23:34 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000016895F73F50> moves and attacks before: ([], [])
10/28/2023 04:23:34 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:23:34 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:23:34 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:23:34 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000016895F73490> (5, 1)
10/28/2023 04:23:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:23:34 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:23:34 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000016895F73210> (4, 1)
10/28/2023 04:23:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:23:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:23:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:23:34 PM CheckField(): moves and attacks registered
10/28/2023 04:23:34 PM CheckField(): there are possible moves from that location
10/28/2023 04:23:34 PM Move(): attempting move() with (6, 1)
10/28/2023 04:23:37 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:23:40 PM CheckField(): attempting with (1, 1)
10/28/2023 04:23:40 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 04:23:40 PM CheckField(): move is possible
10/28/2023 04:23:40 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000016895F73D50> moves and attacks before: ([], [])
10/28/2023 04:23:40 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:23:40 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 04:23:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:23:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000016895F72D90> (2, 1)
10/28/2023 04:23:40 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 04:23:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:23:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000016895F72FD0> (3, 1)
10/28/2023 04:23:40 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 04:23:40 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 04:23:40 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 04:23:40 PM CheckField(): moves and attacks registered
10/28/2023 04:23:40 PM CheckField(): there are possible moves from that location
10/28/2023 04:23:40 PM Move(): attempting move() with (1, 1)
10/28/2023 04:23:42 PM found move (3, 1) in [(2, 1), (3, 1)]
10/28/2023 04:23:44 PM CheckField(): attempting with (7, 2)
10/28/2023 04:23:44 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:23:44 PM CheckField(): move is possible
10/28/2023 04:23:44 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x0000016895F7C1D0> moves and attacks before: ([], [])
10/28/2023 04:27:54 PM Lanuching Main.py
10/28/2023 04:27:54 PM (0, 0)
10/28/2023 04:28:05 PM CheckField(): attempting with (6, 1)
10/28/2023 04:28:05 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:28:05 PM CheckField(): move is possible
10/28/2023 04:28:05 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000026C3D2E00D0> moves and attacks before: ([], [])
10/28/2023 04:28:05 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:28:05 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:28:05 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:28:05 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026C3D2D35D0> (5, 1)
10/28/2023 04:28:05 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:28:05 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:28:05 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026C3D2D3350> (4, 1)
10/28/2023 04:28:05 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:28:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:28:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:28:05 PM CheckField(): moves and attacks registered
10/28/2023 04:28:05 PM CheckField(): there are possible moves from that location
10/28/2023 04:28:05 PM Move(): attempting move() with (6, 1)
10/28/2023 04:28:07 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:28:10 PM CheckField(): attempting with (1, 1)
10/28/2023 04:28:10 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 04:28:10 PM CheckField(): move is possible
10/28/2023 04:28:10 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000026C3D2D3E90> moves and attacks before: ([], [])
10/28/2023 04:28:10 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:28:10 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 04:28:10 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:28:10 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026C3D2D2ED0> (2, 1)
10/28/2023 04:28:10 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 04:28:10 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:28:10 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000026C3D2D3110> (3, 1)
10/28/2023 04:28:10 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 04:28:10 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 04:28:10 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 04:28:10 PM CheckField(): moves and attacks registered
10/28/2023 04:28:10 PM CheckField(): there are possible moves from that location
10/28/2023 04:28:10 PM Move(): attempting move() with (1, 1)
10/28/2023 04:28:10 PM found move (3, 1) in [(2, 1), (3, 1)]
10/28/2023 04:28:12 PM CheckField(): attempting with (7, 2)
10/28/2023 04:28:12 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:28:12 PM CheckField(): move is possible
10/28/2023 04:28:12 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x0000026C3D2E0310> moves and attacks before: ([], [])
10/28/2023 04:33:37 PM Lanuching Main.py
10/28/2023 04:33:37 PM (0, 0)
10/28/2023 04:33:40 PM CheckField(): attempting with (6, 1)
10/28/2023 04:33:40 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:33:40 PM CheckField(): move is possible
10/28/2023 04:33:40 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002025BB09650> moves and attacks before: ([], [])
10/28/2023 04:33:40 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:33:40 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:33:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002025BB08B50> (5, 1)
10/28/2023 04:33:40 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:33:40 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:40 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002025BB088D0> (4, 1)
10/28/2023 04:33:40 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:33:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:33:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:33:40 PM CheckField(): moves and attacks registered
10/28/2023 04:33:40 PM CheckField(): there are possible moves from that location
10/28/2023 04:33:40 PM Move(): attempting move() with (6, 1)
10/28/2023 04:33:41 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:33:43 PM CheckField(): attempting with (1, 1)
10/28/2023 04:33:43 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 04:33:43 PM CheckField(): move is possible
10/28/2023 04:33:43 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002025BB09450> moves and attacks before: ([], [])
10/28/2023 04:33:43 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:33:43 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 04:33:43 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:43 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002025BB08090> (2, 1)
10/28/2023 04:33:43 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 04:33:43 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:43 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002025BB08690> (3, 1)
10/28/2023 04:33:43 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 04:33:43 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 04:33:43 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 04:33:43 PM CheckField(): moves and attacks registered
10/28/2023 04:33:43 PM CheckField(): there are possible moves from that location
10/28/2023 04:33:43 PM Move(): attempting move() with (1, 1)
10/28/2023 04:33:44 PM found move (3, 1) in [(2, 1), (3, 1)]
10/28/2023 04:33:46 PM CheckField(): attempting with (7, 2)
10/28/2023 04:33:46 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:33:46 PM CheckField(): move is possible
10/28/2023 04:33:46 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000002025BB09890> moves and attacks before: ([], [])
10/28/2023 04:33:52 PM Lanuching Main.py
10/28/2023 04:33:52 PM (0, 0)
10/28/2023 04:33:55 PM CheckField(): attempting with (6, 1)
10/28/2023 04:33:55 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:33:55 PM CheckField(): move is possible
10/28/2023 04:33:55 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001AA9540C9D0> moves and attacks before: ([], [])
10/28/2023 04:33:55 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:33:55 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:33:55 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:55 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001AA953FBA10> (5, 1)
10/28/2023 04:33:55 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:33:55 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:55 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001AA953FB790> (4, 1)
10/28/2023 04:33:55 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:33:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:33:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:33:55 PM CheckField(): moves and attacks registered
10/28/2023 04:33:55 PM CheckField(): there are possible moves from that location
10/28/2023 04:33:55 PM Move(): attempting move() with (6, 1)
10/28/2023 04:33:56 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:33:57 PM CheckField(): attempting with (1, 1)
10/28/2023 04:33:57 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 04:33:57 PM CheckField(): move is possible
10/28/2023 04:33:57 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001AA9540C790> moves and attacks before: ([], [])
10/28/2023 04:33:57 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:33:57 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 04:33:57 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:57 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001AA953FB310> (2, 1)
10/28/2023 04:33:57 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 04:33:57 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:33:57 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001AA953FB550> (3, 1)
10/28/2023 04:33:57 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 04:33:57 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 04:33:57 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 04:33:57 PM CheckField(): moves and attacks registered
10/28/2023 04:33:57 PM CheckField(): there are possible moves from that location
10/28/2023 04:33:57 PM Move(): attempting move() with (1, 1)
10/28/2023 04:33:58 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 04:33:59 PM CheckField(): attempting with (7, 2)
10/28/2023 04:33:59 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:33:59 PM CheckField(): move is possible
10/28/2023 04:33:59 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000001AA9540CC10> moves and attacks before: ([], [])
10/28/2023 04:37:20 PM Lanuching Main.py
10/28/2023 04:37:20 PM (0, 0)
10/28/2023 04:37:24 PM CheckField(): attempting with (6, 1)
10/28/2023 04:37:24 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 04:37:24 PM CheckField(): move is possible
10/28/2023 04:37:24 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002435F1E3F90> moves and attacks before: ([], [])
10/28/2023 04:37:24 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:37:24 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 04:37:24 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:37:24 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002435F1E34D0> (5, 1)
10/28/2023 04:37:24 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 04:37:24 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:37:24 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002435F1E3250> (4, 1)
10/28/2023 04:37:24 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 04:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 04:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 04:37:24 PM CheckField(): moves and attacks registered
10/28/2023 04:37:24 PM CheckField(): there are possible moves from that location
10/28/2023 04:37:24 PM Move(): attempting move() with (6, 1)
10/28/2023 04:37:24 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 04:37:27 PM CheckField(): attempting with (1, 1)
10/28/2023 04:37:27 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 04:37:27 PM CheckField(): move is possible
10/28/2023 04:37:27 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002435F1E3D90> moves and attacks before: ([], [])
10/28/2023 04:37:27 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 04:37:27 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 04:37:27 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:37:27 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002435F1E2DD0> (2, 1)
10/28/2023 04:37:27 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 04:37:27 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 04:37:27 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002435F1E3010> (3, 1)
10/28/2023 04:37:27 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 04:37:27 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 04:37:27 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 04:37:27 PM CheckField(): moves and attacks registered
10/28/2023 04:37:27 PM CheckField(): there are possible moves from that location
10/28/2023 04:37:27 PM Move(): attempting move() with (1, 1)
10/28/2023 04:37:28 PM found move (3, 1) in [(2, 1), (3, 1)]
10/28/2023 04:37:30 PM CheckField(): attempting with (7, 2)
10/28/2023 04:37:30 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 04:37:30 PM CheckField(): move is possible
10/28/2023 04:37:30 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000002435F1EC210> moves and attacks before: ([], [])
10/28/2023 04:37:30 PM RenderPossibleMoves(): moves and attacks after: ([(6, 1), (5, 0)], [])
10/28/2023 04:37:30 PM CheckField(): moves and attacks registered
10/28/2023 04:37:30 PM CheckField(): there are possible moves from that location
10/28/2023 04:37:30 PM Move(): attempting move() with (7, 2)
10/28/2023 04:37:34 PM found move (5, 0) in [(6, 1), (5, 0)]
10/28/2023 04:37:47 PM CheckField(): attempting with (0, 2)
10/28/2023 04:37:47 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 2) args
10/28/2023 04:37:47 PM CheckField(): move is possible
10/28/2023 04:37:47 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000002435F1E3C10> moves and attacks before: ([], [])
10/28/2023 04:37:47 PM RenderPossibleMoves(): moves and attacks after: ([(1, 1), (2, 0)], [])
10/28/2023 04:37:47 PM CheckField(): moves and attacks registered
10/28/2023 04:37:47 PM CheckField(): there are possible moves from that location
10/28/2023 04:37:47 PM Move(): attempting move() with (0, 2)
10/28/2023 04:37:50 PM found move (2, 0) in [(1, 1), (2, 0)]
10/28/2023 04:37:55 PM CheckField(): attempting with (7, 3)
10/28/2023 04:37:55 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 3) args
10/28/2023 04:37:55 PM CheckField(): move is possible
10/28/2023 04:37:55 PM RenderPossibleMoves(): choosen figure: <piece.Queen object at 0x000002435F1EC250> moves and attacks before: ([], [])
10/28/2023 04:37:55 PM RenderPossibleMoves(): moves and attacks after: ([(7, 2)], [])
10/28/2023 04:37:55 PM CheckField(): moves and attacks registered
10/28/2023 04:37:55 PM CheckField(): there are possible moves from that location
10/28/2023 04:37:55 PM Move(): attempting move() with (7, 3)
10/28/2023 04:37:57 PM found move (7, 2) in [(7, 2)]
10/28/2023 04:38:45 PM CheckField(): attempting with (6, 0)
10/28/2023 04:38:45 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 04:38:47 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 04:38:48 PM CheckField(): attempting with (6, 0)
10/28/2023 04:38:48 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/28/2023 04:38:50 PM CheckIfMoveFromFieldIsPossible(): choosen field is enemy color
10/28/2023 05:03:53 PM Lanuching Main.py
10/28/2023 05:03:53 PM (0, 0)
10/28/2023 05:03:55 PM Lanuching Main.py
10/28/2023 05:03:55 PM (0, 0)
10/28/2023 05:03:59 PM CheckField(): attempting with (7, 1)
10/28/2023 05:03:59 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 1) args
10/28/2023 05:03:59 PM CheckField(): move is possible
10/28/2023 05:03:59 PM RenderPossibleMoves(): choosen figure: <piece.Knight object at 0x000001A210E69A50> moves and attacks before: ([], [])
10/28/2023 05:03:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
10/28/2023 05:03:59 PM CheckField(): moves and attacks registered
10/28/2023 05:03:59 PM CheckField(): there are possible moves from that location
10/28/2023 05:03:59 PM Move(): attempting move() with (7, 1)
10/28/2023 05:04:02 PM found move (5, 0) in [(5, 2), (5, 0)]
10/28/2023 05:04:07 PM CheckField(): attempting with (1, 7)
10/28/2023 05:04:07 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 7) args
10/28/2023 05:04:07 PM CheckField(): move is possible
10/28/2023 05:04:07 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001A210E697D0> moves and attacks before: ([], [])
10/28/2023 05:04:07 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:04:07 PM Pawn Figure info: (1, 7, 'b', 'p')
10/28/2023 05:04:07 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:07 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68810> (2, 7)
10/28/2023 05:04:07 PM Pawn (2, 7) is empty appended moves [(2, 7)]
10/28/2023 05:04:07 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:07 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68A50> (3, 7)
10/28/2023 05:04:07 PM Pawn (3, 7) is empty appended moves [(2, 7), (3, 7)]
10/28/2023 05:04:07 PM Pawn ReturnPossibleMove(): returning values: ([(2, 7), (3, 7)], [])
10/28/2023 05:04:07 PM RenderPossibleMoves(): moves and attacks after: ([(2, 7), (3, 7)], [])
10/28/2023 05:04:07 PM CheckField(): moves and attacks registered
10/28/2023 05:04:07 PM CheckField(): there are possible moves from that location
10/28/2023 05:04:07 PM Move(): attempting move() with (1, 7)
10/28/2023 05:04:07 PM found move (2, 7) in [(2, 7), (3, 7)]
10/28/2023 05:04:13 PM CheckField(): attempting with (6, 3)
10/28/2023 05:04:13 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 3) args
10/28/2023 05:04:13 PM CheckField(): move is possible
10/28/2023 05:04:13 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001A210E698D0> moves and attacks before: ([], [])
10/28/2023 05:04:13 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:04:13 PM Pawn Figure info: (6, 3, 'w', 'p')
10/28/2023 05:04:13 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:13 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68DD0> (5, 3)
10/28/2023 05:04:13 PM Pawn (5, 3) is empty appended moves [(5, 3)]
10/28/2023 05:04:13 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:13 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68B50> (4, 3)
10/28/2023 05:04:13 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
10/28/2023 05:04:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
10/28/2023 05:04:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
10/28/2023 05:04:13 PM CheckField(): moves and attacks registered
10/28/2023 05:04:13 PM CheckField(): there are possible moves from that location
10/28/2023 05:04:13 PM Move(): attempting move() with (6, 3)
10/28/2023 05:04:15 PM found move (4, 3) in [(5, 3), (4, 3)]
10/28/2023 05:04:20 PM CheckField(): attempting with (1, 2)
10/28/2023 05:04:20 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 2) args
10/28/2023 05:04:20 PM CheckField(): move is possible
10/28/2023 05:04:20 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001A210E69690> moves and attacks before: ([], [])
10/28/2023 05:04:20 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:04:20 PM Pawn Figure info: (1, 2, 'b', 'p')
10/28/2023 05:04:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68690> (2, 2)
10/28/2023 05:04:20 PM Pawn (2, 2) is empty appended moves [(2, 2)]
10/28/2023 05:04:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E688D0> (3, 2)
10/28/2023 05:04:20 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
10/28/2023 05:04:20 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
10/28/2023 05:04:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
10/28/2023 05:04:20 PM CheckField(): moves and attacks registered
10/28/2023 05:04:20 PM CheckField(): there are possible moves from that location
10/28/2023 05:04:20 PM Move(): attempting move() with (1, 2)
10/28/2023 05:04:21 PM found move (2, 2) in [(2, 2), (3, 2)]
10/28/2023 05:04:24 PM CheckField(): attempting with (7, 2)
10/28/2023 05:04:24 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 05:04:24 PM CheckField(): move is possible
10/28/2023 05:04:24 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000001A210E69A90> moves and attacks before: ([], [])
10/28/2023 05:04:24 PM RenderPossibleMoves(): moves and attacks after: ([(6, 3), (5, 4), (4, 5), (3, 6)], [(2, 7)])
10/28/2023 05:04:24 PM CheckField(): moves and attacks registered
10/28/2023 05:04:24 PM CheckField(): there are possible moves from that location
10/28/2023 05:04:24 PM Move(): attempting move() with (7, 2)
10/28/2023 05:04:28 PM found move (3, 6) in [(6, 3), (5, 4), (4, 5), (3, 6)]
10/28/2023 05:04:54 PM CheckField(): attempting with (1, 3)
10/28/2023 05:04:54 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 3) args
10/28/2023 05:04:54 PM CheckField(): move is possible
10/28/2023 05:04:54 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001A210E696D0> moves and attacks before: ([], [])
10/28/2023 05:04:54 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:04:54 PM Pawn Figure info: (1, 3, 'b', 'p')
10/28/2023 05:04:54 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:54 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E686D0> (2, 3)
10/28/2023 05:04:54 PM Pawn (2, 3) is empty appended moves [(2, 3)]
10/28/2023 05:04:54 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:04:54 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68910> (3, 3)
10/28/2023 05:04:54 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
10/28/2023 05:04:54 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
10/28/2023 05:04:54 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
10/28/2023 05:04:54 PM CheckField(): moves and attacks registered
10/28/2023 05:04:54 PM CheckField(): there are possible moves from that location
10/28/2023 05:04:54 PM Move(): attempting move() with (1, 3)
10/28/2023 05:04:59 PM value too long
10/28/2023 05:05:00 PM found move (3, 3) in [(2, 3), (3, 3)]
10/28/2023 05:05:06 PM CheckField(): attempting with (7, 3)
10/28/2023 05:05:06 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 3) args
10/28/2023 05:05:06 PM CheckField(): move is possible
10/28/2023 05:05:06 PM RenderPossibleMoves(): choosen figure: <piece.Queen object at 0x000001A210E69AD0> moves and attacks before: ([], [])
10/28/2023 05:05:06 PM RenderPossibleMoves(): moves and attacks after: ([(6, 3), (5, 3), (7, 2), (7, 1)], [])
10/28/2023 05:05:06 PM CheckField(): moves and attacks registered
10/28/2023 05:05:06 PM CheckField(): there are possible moves from that location
10/28/2023 05:05:06 PM Move(): attempting move() with (7, 3)
10/28/2023 05:05:08 PM found move (5, 3) in [(6, 3), (5, 3), (7, 2), (7, 1)]
10/28/2023 05:05:12 PM CheckField(): attempting with (1, 0)
10/28/2023 05:05:12 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 05:05:12 PM CheckField(): move is possible
10/28/2023 05:05:12 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001A210E69610> moves and attacks before: ([], [])
10/28/2023 05:05:12 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:05:12 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 05:05:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:05:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210B60090> (2, 0)
10/28/2023 05:05:12 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 05:05:12 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:05:12 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001A210E68850> (3, 0)
10/28/2023 05:05:12 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 05:05:12 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 05:05:12 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 05:05:12 PM CheckField(): moves and attacks registered
10/28/2023 05:05:12 PM CheckField(): there are possible moves from that location
10/28/2023 05:05:12 PM Move(): attempting move() with (1, 0)
10/28/2023 05:05:14 PM found move (2, 0) in [(2, 0), (3, 0)]
10/28/2023 05:05:17 PM CheckField(): attempting with (7, 0)
10/28/2023 05:05:17 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 05:05:17 PM CheckField(): move is possible
10/28/2023 05:05:17 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000001A210E69A10> moves and attacks before: ([], [])
10/28/2023 05:05:17 PM RenderPossibleMoves(): moves and attacks after: ([(7, 1), (7, 2), (7, 3)], [])
10/28/2023 05:05:17 PM CheckField(): moves and attacks registered
10/28/2023 05:05:17 PM CheckField(): there are possible moves from that location
10/28/2023 05:05:17 PM Move(): attempting move() with (7, 0)
10/28/2023 05:05:19 PM found move (7, 3) in [(7, 1), (7, 2), (7, 3)]
10/28/2023 05:06:47 PM Lanuching Main.py
10/28/2023 05:06:47 PM (0, 0)
10/28/2023 05:10:02 PM CheckField(): attempting with (7, 1)
10/28/2023 05:10:02 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 1) args
10/28/2023 05:10:02 PM CheckField(): move is possible
10/28/2023 05:10:02 PM RenderPossibleMoves(): choosen figure: <piece.Knight object at 0x000002454D77C310> moves and attacks before: ([], [])
10/28/2023 05:10:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
10/28/2023 05:10:02 PM CheckField(): moves and attacks registered
10/28/2023 05:10:02 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:02 PM Move(): attempting move() with (7, 1)
10/28/2023 05:10:04 PM found move (5, 2) in [(5, 2), (5, 0)]
10/28/2023 05:10:09 PM CheckField(): attempting with (1, 2)
10/28/2023 05:10:09 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 2) args
10/28/2023 05:10:09 PM CheckField(): move is possible
10/28/2023 05:10:09 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D76FF10> moves and attacks before: ([], [])
10/28/2023 05:10:09 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:09 PM Pawn Figure info: (1, 2, 'b', 'p')
10/28/2023 05:10:09 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:09 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76EF50> (2, 2)
10/28/2023 05:10:09 PM Pawn (2, 2) is empty appended moves [(2, 2)]
10/28/2023 05:10:09 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:09 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F190> (3, 2)
10/28/2023 05:10:09 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
10/28/2023 05:10:09 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
10/28/2023 05:10:09 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
10/28/2023 05:10:09 PM CheckField(): moves and attacks registered
10/28/2023 05:10:09 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:09 PM Move(): attempting move() with (1, 2)
10/28/2023 05:10:10 PM found move (2, 2) in [(2, 2), (3, 2)]
10/28/2023 05:10:16 PM CheckField(): attempting with (6, 1)
10/28/2023 05:10:16 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 1) args
10/28/2023 05:10:16 PM CheckField(): move is possible
10/28/2023 05:10:16 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D77C110> moves and attacks before: ([], [])
10/28/2023 05:10:16 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:16 PM Pawn Figure info: (6, 1, 'w', 'p')
10/28/2023 05:10:16 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:16 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F610> (5, 1)
10/28/2023 05:10:16 PM Pawn (5, 1) is empty appended moves [(5, 1)]
10/28/2023 05:10:16 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:16 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F390> (4, 1)
10/28/2023 05:10:16 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
10/28/2023 05:10:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
10/28/2023 05:10:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
10/28/2023 05:10:16 PM CheckField(): moves and attacks registered
10/28/2023 05:10:16 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:16 PM Move(): attempting move() with (6, 1)
10/28/2023 05:10:17 PM found move (4, 1) in [(5, 1), (4, 1)]
10/28/2023 05:10:20 PM CheckField(): attempting with (1, 1)
10/28/2023 05:10:20 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 1) args
10/28/2023 05:10:20 PM CheckField(): move is possible
10/28/2023 05:10:20 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D76FED0> moves and attacks before: ([], [])
10/28/2023 05:10:20 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:20 PM Pawn Figure info: (1, 1, 'b', 'p')
10/28/2023 05:10:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76EF10> (2, 1)
10/28/2023 05:10:20 PM Pawn (2, 1) is empty appended moves [(2, 1)]
10/28/2023 05:10:20 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:20 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F150> (3, 1)
10/28/2023 05:10:20 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
10/28/2023 05:10:20 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
10/28/2023 05:10:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
10/28/2023 05:10:20 PM CheckField(): moves and attacks registered
10/28/2023 05:10:20 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:20 PM Move(): attempting move() with (1, 1)
10/28/2023 05:10:21 PM found move (2, 1) in [(2, 1), (3, 1)]
10/28/2023 05:10:25 PM CheckField(): attempting with (7, 2)
10/28/2023 05:10:25 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 2) args
10/28/2023 05:10:25 PM CheckField(): move is possible
10/28/2023 05:10:25 PM RenderPossibleMoves(): choosen figure: <piece.Bishop object at 0x000002454D77C350> moves and attacks before: ([], [])
10/28/2023 05:10:25 PM RenderPossibleMoves(): moves and attacks after: ([(6, 1), (5, 0)], [])
10/28/2023 05:10:25 PM CheckField(): moves and attacks registered
10/28/2023 05:10:25 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:25 PM Move(): attempting move() with (7, 2)
10/28/2023 05:10:27 PM found move (5, 0) in [(6, 1), (5, 0)]
10/28/2023 05:10:32 PM CheckField(): attempting with (1, 0)
10/28/2023 05:10:32 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/28/2023 05:10:32 PM CheckField(): move is possible
10/28/2023 05:10:32 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D76FE90> moves and attacks before: ([], [])
10/28/2023 05:10:32 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:32 PM Pawn Figure info: (1, 0, 'b', 'p')
10/28/2023 05:10:32 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:32 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76EED0> (2, 0)
10/28/2023 05:10:32 PM Pawn (2, 0) is empty appended moves [(2, 0)]
10/28/2023 05:10:32 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:32 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F110> (3, 0)
10/28/2023 05:10:32 PM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/28/2023 05:10:32 PM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/28/2023 05:10:32 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/28/2023 05:10:32 PM CheckField(): moves and attacks registered
10/28/2023 05:10:32 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:32 PM Move(): attempting move() with (1, 0)
10/28/2023 05:10:33 PM found move (3, 0) in [(2, 0), (3, 0)]
10/28/2023 05:10:41 PM CheckField(): attempting with (6, 3)
10/28/2023 05:10:41 PM CheckIfMoveFromFieldIsPossible(): attempting with (6, 3) args
10/28/2023 05:10:41 PM CheckField(): move is possible
10/28/2023 05:10:41 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D77C190> moves and attacks before: ([], [])
10/28/2023 05:10:41 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:41 PM Pawn Figure info: (6, 3, 'w', 'p')
10/28/2023 05:10:41 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:41 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F690> (5, 3)
10/28/2023 05:10:41 PM Pawn (5, 3) is empty appended moves [(5, 3)]
10/28/2023 05:10:41 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:41 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F410> (4, 3)
10/28/2023 05:10:41 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
10/28/2023 05:10:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
10/28/2023 05:10:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
10/28/2023 05:10:41 PM CheckField(): moves and attacks registered
10/28/2023 05:10:41 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:41 PM Move(): attempting move() with (6, 3)
10/28/2023 05:10:42 PM found move (4, 3) in [(5, 3), (4, 3)]
10/28/2023 05:10:44 PM CheckField(): attempting with (1, 3)
10/28/2023 05:10:44 PM CheckIfMoveFromFieldIsPossible(): attempting with (1, 3) args
10/28/2023 05:10:44 PM CheckField(): move is possible
10/28/2023 05:10:44 PM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002454D76FF50> moves and attacks before: ([], [])
10/28/2023 05:10:44 PM Pawn attemping ReturnPossibleMoves() Method
10/28/2023 05:10:44 PM Pawn Figure info: (1, 3, 'b', 'p')
10/28/2023 05:10:44 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:44 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76EF90> (2, 3)
10/28/2023 05:10:44 PM Pawn (2, 3) is empty appended moves [(2, 3)]
10/28/2023 05:10:44 PM Pawn attempting check on board[x-a][y]: True
10/28/2023 05:10:44 PM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002454D76F1D0> (3, 3)
10/28/2023 05:10:44 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
10/28/2023 05:10:44 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
10/28/2023 05:10:44 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
10/28/2023 05:10:44 PM CheckField(): moves and attacks registered
10/28/2023 05:10:44 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:44 PM Move(): attempting move() with (1, 3)
10/28/2023 05:10:45 PM found move (3, 3) in [(2, 3), (3, 3)]
10/28/2023 05:10:48 PM CheckField(): attempting with (7, 3)
10/28/2023 05:10:48 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 3) args
10/28/2023 05:10:48 PM CheckField(): move is possible
10/28/2023 05:10:48 PM RenderPossibleMoves(): choosen figure: <piece.Queen object at 0x000002454D77C390> moves and attacks before: ([], [])
10/28/2023 05:10:48 PM RenderPossibleMoves(): moves and attacks after: ([(6, 3), (5, 3), (7, 2), (7, 1)], [])
10/28/2023 05:10:48 PM CheckField(): moves and attacks registered
10/28/2023 05:10:48 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:48 PM Move(): attempting move() with (7, 3)
10/28/2023 05:10:50 PM found move (5, 3) in [(6, 3), (5, 3), (7, 2), (7, 1)]
10/28/2023 05:10:56 PM CheckField(): attempting with (0, 3)
10/28/2023 05:10:56 PM CheckIfMoveFromFieldIsPossible(): attempting with (0, 3) args
10/28/2023 05:10:56 PM CheckField(): move is possible
10/28/2023 05:10:56 PM RenderPossibleMoves(): choosen figure: <piece.Queen object at 0x000002454D76FD90> moves and attacks before: ([], [])
10/28/2023 05:10:56 PM RenderPossibleMoves(): moves and attacks after: ([(1, 3), (2, 3), (1, 2)], [])
10/28/2023 05:10:56 PM CheckField(): moves and attacks registered
10/28/2023 05:10:56 PM CheckField(): there are possible moves from that location
10/28/2023 05:10:56 PM Move(): attempting move() with (0, 3)
10/28/2023 05:10:58 PM found move (2, 3) in [(1, 3), (2, 3), (1, 2)]
10/28/2023 05:11:01 PM CheckField(): attempting with (7, 0)
10/28/2023 05:11:01 PM CheckIfMoveFromFieldIsPossible(): attempting with (7, 0) args
10/28/2023 05:11:01 PM CheckField(): move is possible
10/28/2023 05:11:01 PM RenderPossibleMoves(): choosen figure: <piece.Rock object at 0x000002454D77C2D0> moves and attacks before: ([], [])
10/28/2023 05:11:01 PM RenderPossibleMoves(): moves and attacks after: ([(7, 1), (7, 2), (7, 3)], [])
10/28/2023 05:11:01 PM CheckField(): moves and attacks registered
10/28/2023 05:11:01 PM CheckField(): there are possible moves from that location
10/28/2023 05:11:01 PM Move(): attempting move() with (7, 0)
10/28/2023 05:11:03 PM found move (7, 3) in [(7, 1), (7, 2), (7, 3)]
10/28/2023 05:21:38 PM value too long
10/28/2023 11:13:10 PM Lanuching Main.py
10/28/2023 11:14:15 PM Lanuching Main.py
10/28/2023 11:14:56 PM Lanuching Main.py
10/28/2023 11:15:01 PM Lanuching Main.py
10/28/2023 11:15:48 PM Lanuching Main.py
10/28/2023 11:16:32 PM Lanuching Main.py
10/28/2023 11:17:08 PM Lanuching Main.py
10/28/2023 11:17:41 PM Lanuching Main.py
10/28/2023 11:18:23 PM Lanuching Main.py
10/28/2023 11:19:27 PM Lanuching Main.py
10/28/2023 11:19:51 PM Lanuching Main.py
10/28/2023 11:20:28 PM Lanuching Main.py
10/28/2023 11:21:48 PM Lanuching Main.py
10/28/2023 11:32:33 PM Lanuching Main.py
10/28/2023 11:38:01 PM Lanuching Main.py
10/28/2023 11:38:47 PM Lanuching Main.py
10/28/2023 11:39:58 PM Lanuching Main.py
10/28/2023 11:42:43 PM Lanuching Main.py
10/28/2023 11:43:29 PM Lanuching Main.py
10/28/2023 11:44:46 PM Lanuching Main.py
10/28/2023 11:48:09 PM Lanuching Main.py
10/28/2023 11:50:01 PM Lanuching Main.py
10/28/2023 11:50:26 PM Lanuching Main.py
10/28/2023 11:50:50 PM Lanuching Main.py
10/28/2023 11:53:10 PM Lanuching Main.py
10/28/2023 11:53:56 PM Lanuching Main.py
10/28/2023 11:54:18 PM Lanuching Main.py
10/28/2023 11:55:18 PM Lanuching Main.py
10/29/2023 12:00:42 AM Lanuching Main.py
10/29/2023 12:01:14 AM Lanuching Main.py
10/29/2023 12:02:36 AM Lanuching Main.py
10/29/2023 12:06:05 AM entering code: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering hr: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering list: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering reference: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering html_block: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering heading: StateBlock(line=1,level=0,tokens=0), 1, 7, False
10/29/2023 12:06:05 AM entering code: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering hr: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering list: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering reference: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering html_block: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering heading: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering lheading: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering paragraph: StateBlock(line=3,level=0,tokens=3), 3, 7, False
10/29/2023 12:06:05 AM entering code: StateBlock(line=5,level=0,tokens=6), 5, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=5,level=0,tokens=6), 5, 7, False
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=5,level=0,tokens=6), 5, 7, False
10/29/2023 12:06:05 AM entering hr: StateBlock(line=5,level=0,tokens=6), 5, 7, False
10/29/2023 12:06:05 AM entering list: StateBlock(line=5,level=0,tokens=6), 5, 7, False
10/29/2023 12:06:05 AM entering code: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering hr: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering list: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering reference: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering html_block: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering heading: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering lheading: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering hr: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering list: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering paragraph: StateBlock(line=5,level=2,tokens=8), 5, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering hr: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering list: StateBlock(line=5,level=2,tokens=8), 6, 7, True
10/29/2023 12:06:05 AM entering fence: StateBlock(line=6,level=1,tokens=12), 6, 7, True
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=6,level=1,tokens=12), 6, 7, True
10/29/2023 12:06:05 AM entering hr: StateBlock(line=6,level=1,tokens=12), 6, 7, True
10/29/2023 12:06:05 AM entering code: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering fence: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering blockquote: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering hr: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering list: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering reference: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering html_block: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering heading: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering lheading: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:05 AM entering paragraph: StateBlock(line=6,level=2,tokens=13), 6, 7, False
10/29/2023 12:06:47 AM Lanuching Main.py
10/29/2023 12:08:54 AM Lanuching Main.py
10/29/2023 12:10:28 AM Lanuching Main.py
10/29/2023 12:13:36 AM Lanuching Main.py
10/29/2023 12:14:29 AM Lanuching Main.py
10/29/2023 12:14:49 AM Lanuching Main.py
10/29/2023 12:16:40 AM Lanuching Main.py
10/29/2023 12:17:46 AM Lanuching Main.py
10/29/2023 12:18:42 AM Lanuching Main.py
10/29/2023 12:22:47 AM Lanuching Main.py
10/29/2023 12:29:34 AM Lanuching Main.py
10/29/2023 12:31:51 AM CheckField(): attempting with (6, 0)
10/29/2023 12:31:51 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 12:31:51 AM CheckField(): move is possible
10/29/2023 12:31:51 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001E8F42C2910> moves and attacks before: ([], [])
10/29/2023 12:31:51 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 12:31:51 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 12:31:51 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 12:31:51 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E8F42C1E50> (5, 0)
10/29/2023 12:31:51 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 12:31:51 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 12:31:51 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001E8F42C1BD0> (4, 0)
10/29/2023 12:31:51 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 12:31:51 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 12:31:51 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 12:31:51 AM CheckField(): moves and attacks registered
10/29/2023 12:31:51 AM CheckField(): there are possible moves from that location
10/29/2023 12:31:51 AM Move(): attempting move() with (6, 0)
10/29/2023 12:32:52 AM Lanuching Main.py
10/29/2023 12:33:11 AM Lanuching Main.py
10/29/2023 12:33:29 AM Lanuching Main.py
10/29/2023 12:37:35 AM Lanuching Main.py
10/29/2023 12:38:41 AM Lanuching Main.py
10/29/2023 12:39:06 AM Lanuching Main.py
10/29/2023 12:40:25 AM Lanuching Main.py
10/29/2023 12:40:45 AM Lanuching Main.py
10/29/2023 12:41:03 AM value too long
10/29/2023 12:41:07 AM value too long
10/29/2023 12:41:34 AM Lanuching Main.py
10/29/2023 12:41:50 AM Lanuching Main.py
10/29/2023 12:46:18 AM Lanuching Main.py
10/29/2023 12:46:41 AM Lanuching Main.py
10/29/2023 12:47:24 AM Lanuching Main.py
10/29/2023 12:48:40 AM Lanuching Main.py
10/29/2023 12:50:23 AM Lanuching Main.py
10/29/2023 12:50:40 AM value too long
10/29/2023 12:51:12 AM Lanuching Main.py
10/29/2023 12:52:05 AM Lanuching Main.py
10/29/2023 12:52:23 AM Lanuching Main.py
10/29/2023 12:52:33 AM Lanuching Main.py
10/29/2023 12:52:42 AM Lanuching Main.py
10/29/2023 12:53:40 AM Lanuching Main.py
10/29/2023 12:54:29 AM Lanuching Main.py
10/29/2023 12:56:18 AM Lanuching Main.py
10/29/2023 12:56:33 AM Lanuching Main.py
10/29/2023 12:56:38 AM Lanuching Main.py
10/29/2023 12:57:03 AM Lanuching Main.py
10/29/2023 01:01:47 AM Lanuching Main.py
10/29/2023 01:13:05 AM Lanuching Main.py
10/29/2023 01:13:09 AM CheckField(): attempting with (6, 0)
10/29/2023 01:13:09 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:13:09 AM CheckField(): move is possible
10/29/2023 01:13:09 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000189243A3A10> moves and attacks before: ([], [])
10/29/2023 01:13:09 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:13:09 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:13:09 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:13:09 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000189243A2F10> (5, 0)
10/29/2023 01:13:09 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:13:09 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:13:09 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000189243A2C90> (4, 0)
10/29/2023 01:13:09 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:13:09 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:13:09 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:13:09 AM CheckField(): moves and attacks registered
10/29/2023 01:13:09 AM CheckField(): there are possible moves from that location
10/29/2023 01:13:09 AM Move(): attempting move() with (6, 0)
10/29/2023 01:13:56 AM Lanuching Main.py
10/29/2023 01:14:07 AM CheckField(): attempting with (6, 0)
10/29/2023 01:14:07 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:14:07 AM CheckField(): move is possible
10/29/2023 01:14:10 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000022F9975DA50> moves and attacks before: ([], [])
10/29/2023 01:14:10 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:14:10 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:14:10 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:14:10 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022F9975C990> (5, 0)
10/29/2023 01:14:10 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:14:10 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:14:10 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022F9975C710> (4, 0)
10/29/2023 01:14:10 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:14:10 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:14:10 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:14:11 AM CheckField(): moves and attacks registered
10/29/2023 01:14:12 AM CheckField(): there are possible moves from that location
10/29/2023 01:14:12 AM Move(): attempting move() with (6, 0)
10/29/2023 01:15:23 AM Lanuching Main.py
10/29/2023 01:15:37 AM Lanuching Main.py
10/29/2023 01:16:31 AM Lanuching Main.py
10/29/2023 01:16:59 AM Lanuching Main.py
10/29/2023 01:17:17 AM Lanuching Main.py
10/29/2023 01:17:34 AM Lanuching Main.py
10/29/2023 01:18:07 AM CheckField(): attempting with (6, 0)
10/29/2023 01:18:07 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:18:07 AM CheckField(): move is possible
10/29/2023 01:18:07 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001D39E2C3BD0> moves and attacks before: ([], [])
10/29/2023 01:18:07 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:18:07 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:18:07 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:18:07 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001D39E2C3110> (5, 0)
10/29/2023 01:18:07 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:18:07 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:18:07 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001D39E2C2E90> (4, 0)
10/29/2023 01:18:07 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:18:07 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:18:07 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:18:07 AM CheckField(): moves and attacks registered
10/29/2023 01:18:07 AM CheckField(): there are possible moves from that location
10/29/2023 01:18:07 AM Move(): attempting move() with (6, 0)
10/29/2023 01:27:16 AM Lanuching Main.py
10/29/2023 01:27:19 AM CheckField(): attempting with (6, 0)
10/29/2023 01:27:19 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:27:19 AM CheckField(): move is possible
10/29/2023 01:27:19 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027D169E3C50> moves and attacks before: ([], [])
10/29/2023 01:27:19 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:27:19 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:27:19 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:27:19 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027D169E3150> (5, 0)
10/29/2023 01:27:19 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:27:19 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:27:19 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027D169E2ED0> (4, 0)
10/29/2023 01:27:19 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:27:19 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:27:19 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:27:19 AM CheckField(): moves and attacks registered
10/29/2023 01:27:19 AM CheckField(): there are possible moves from that location
10/29/2023 01:27:19 AM Move(): attempting move() with (6, 0)
10/29/2023 01:28:14 AM Lanuching Main.py
10/29/2023 01:28:55 AM Lanuching Main.py
10/29/2023 01:29:03 AM CheckField(): attempting with (6, 0)
10/29/2023 01:29:03 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:29:03 AM CheckField(): move is possible
10/29/2023 01:29:03 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000027EE01F2750> moves and attacks before: ([], [])
10/29/2023 01:29:03 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:29:03 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:29:03 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:29:03 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027EE01DE7D0> (5, 0)
10/29/2023 01:29:03 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:29:03 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:29:03 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000027EE01E7610> (4, 0)
10/29/2023 01:29:03 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:29:03 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:29:03 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:29:03 AM CheckField(): moves and attacks registered
10/29/2023 01:29:03 AM CheckField(): there are possible moves from that location
10/29/2023 01:29:03 AM Move(): attempting move() with (6, 0)
10/29/2023 01:29:19 AM Lanuching Main.py
10/29/2023 01:29:34 AM CheckField(): attempting with (6, 0)
10/29/2023 01:29:34 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:29:34 AM CheckField(): move is possible
10/29/2023 01:29:34 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002C904929810> moves and attacks before: ([], [])
10/29/2023 01:29:34 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:29:34 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:29:34 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:29:34 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C904928750> (5, 0)
10/29/2023 01:29:34 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:29:34 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:29:34 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C9049284D0> (4, 0)
10/29/2023 01:29:34 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:29:34 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:29:34 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:29:34 AM CheckField(): moves and attacks registered
10/29/2023 01:29:34 AM CheckField(): there are possible moves from that location
10/29/2023 01:29:34 AM Move(): attempting move() with (6, 0)
10/29/2023 01:35:37 AM Lanuching Main.py
10/29/2023 01:35:41 AM CheckField(): attempting with (6, 0)
10/29/2023 01:35:41 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:35:41 AM CheckField(): move is possible
10/29/2023 01:35:41 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000147E2913910> moves and attacks before: ([], [])
10/29/2023 01:35:41 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:35:41 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:35:41 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:35:41 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000147E2912E10> (5, 0)
10/29/2023 01:35:41 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:35:41 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:35:41 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000147E2912B90> (4, 0)
10/29/2023 01:35:41 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:35:41 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:35:41 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:35:41 AM CheckField(): moves and attacks registered
10/29/2023 01:35:41 AM CheckField(): there are possible moves from that location
10/29/2023 01:35:41 AM Move(): attempting move() with (6, 0)
10/29/2023 01:35:59 AM Lanuching Main.py
10/29/2023 01:36:02 AM CheckField(): attempting with (6, 0)
10/29/2023 01:36:02 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:36:02 AM CheckField(): move is possible
10/29/2023 01:36:02 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x00000206BDDB3A90> moves and attacks before: ([], [])
10/29/2023 01:36:02 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:36:02 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:36:02 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:36:02 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000206BDDB3010> (5, 0)
10/29/2023 01:36:02 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:36:02 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:36:02 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x00000206BDDB2D90> (4, 0)
10/29/2023 01:36:02 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:36:02 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:36:02 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:36:02 AM CheckField(): moves and attacks registered
10/29/2023 01:36:02 AM CheckField(): there are possible moves from that location
10/29/2023 01:36:02 AM Move(): attempting move() with (6, 0)
10/29/2023 01:36:04 AM did not found move (6, 0) in [(5, 0), (4, 0)]
10/29/2023 01:36:06 AM did not found move (6, 0) in [(5, 0), (4, 0)]
10/29/2023 01:38:06 AM Lanuching Main.py
10/29/2023 01:38:29 AM Lanuching Main.py
10/29/2023 01:38:41 AM Lanuching Main.py
10/29/2023 01:39:00 AM value too long
10/29/2023 01:39:05 AM CheckField(): attempting with (6, 0)
10/29/2023 01:39:05 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:39:05 AM CheckField(): move is possible
10/29/2023 01:39:05 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002EDC7E5DC90> moves and attacks before: ([], [])
10/29/2023 01:39:05 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:39:05 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:39:05 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:39:05 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002EDC7E5CC10> (5, 0)
10/29/2023 01:39:05 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:39:05 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:39:05 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002EDC7E5C990> (4, 0)
10/29/2023 01:39:05 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:39:05 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:39:05 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:39:05 AM CheckField(): moves and attacks registered
10/29/2023 01:39:05 AM CheckField(): there are possible moves from that location
10/29/2023 01:39:05 AM Move(): attempting move() with (6, 0)
10/29/2023 01:39:52 AM found move (5, 0) in [(5, 0), (4, 0)]
10/29/2023 01:55:06 AM Lanuching Main.py
10/29/2023 01:57:08 AM Lanuching Main.py
10/29/2023 01:57:11 AM CheckField(): attempting with (6, 0)
10/29/2023 01:57:11 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:57:11 AM CheckField(): move is possible
10/29/2023 01:57:11 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000021A914939D0> moves and attacks before: ([], [])
10/29/2023 01:57:11 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:57:11 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:57:11 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:57:11 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000021A91492F10> (5, 0)
10/29/2023 01:57:11 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:57:11 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:57:11 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000021A91492C90> (4, 0)
10/29/2023 01:57:11 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:57:11 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:57:11 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:57:11 AM CheckField(): moves and attacks registered
10/29/2023 01:57:11 AM CheckField(): there are possible moves from that location
10/29/2023 01:57:11 AM Move(): attempting move() with (6, 0)
10/29/2023 01:57:41 AM Lanuching Main.py
10/29/2023 01:57:45 AM CheckField(): attempting with (6, 0)
10/29/2023 01:57:45 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 01:57:45 AM CheckField(): move is possible
10/29/2023 01:57:45 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000024008253950> moves and attacks before: ([], [])
10/29/2023 01:57:45 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 01:57:45 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 01:57:45 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:57:45 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000024008252E50> (5, 0)
10/29/2023 01:57:45 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 01:57:45 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 01:57:45 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000024008252BD0> (4, 0)
10/29/2023 01:57:45 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 01:57:45 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 01:57:45 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 01:57:45 AM CheckField(): moves and attacks registered
10/29/2023 01:57:45 AM CheckField(): there are possible moves from that location
10/29/2023 01:57:45 AM Move(): attempting move() with (6, 0)
10/29/2023 02:01:14 AM Lanuching Main.py
10/29/2023 02:01:38 AM CheckField(): attempting with (6, 0)
10/29/2023 02:01:38 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:01:38 AM CheckField(): move is possible
10/29/2023 02:01:38 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000022186EF8E10> moves and attacks before: ([], [])
10/29/2023 02:01:38 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:01:38 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:01:38 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:01:38 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022186EF3D50> (5, 0)
10/29/2023 02:01:38 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:01:38 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:01:38 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022186EF3AD0> (4, 0)
10/29/2023 02:01:38 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:01:38 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:01:38 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:01:38 AM CheckField(): moves and attacks registered
10/29/2023 02:01:38 AM CheckField(): there are possible moves from that location
10/29/2023 02:01:43 AM Move(): attempting move() with (6, 0)
10/29/2023 02:02:09 AM Lanuching Main.py
10/29/2023 02:02:12 AM CheckField(): attempting with (6, 0)
10/29/2023 02:02:12 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:02:12 AM CheckField(): move is possible
10/29/2023 02:02:12 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000024F2F783A50> moves and attacks before: ([], [])
10/29/2023 02:02:12 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:02:12 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:02:12 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:02:12 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000024F2F782F90> (5, 0)
10/29/2023 02:02:12 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:02:12 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:02:12 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000024F2F782D10> (4, 0)
10/29/2023 02:02:12 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:02:12 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:02:12 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:02:12 AM CheckField(): moves and attacks registered
10/29/2023 02:02:12 AM CheckField(): there are possible moves from that location
10/29/2023 02:02:12 AM Move(): attempting move() with (6, 0)
10/29/2023 02:02:19 AM Lanuching Main.py
10/29/2023 02:02:42 AM CheckField(): attempting with (6, 0)
10/29/2023 02:02:42 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:02:42 AM CheckField(): move is possible
10/29/2023 02:02:42 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002225392D990> moves and attacks before: ([], [])
10/29/2023 02:02:42 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:02:42 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:02:42 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:02:42 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002225392C910> (5, 0)
10/29/2023 02:02:42 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:02:42 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:02:42 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002225392C690> (4, 0)
10/29/2023 02:02:42 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:02:42 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:02:42 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:02:42 AM CheckField(): moves and attacks registered
10/29/2023 02:02:42 AM CheckField(): there are possible moves from that location
10/29/2023 02:03:17 AM Move(): attempting move() with (6, 0)
10/29/2023 02:06:38 AM Lanuching Main.py
10/29/2023 02:06:40 AM CheckField(): attempting with (6, 0)
10/29/2023 02:06:40 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:06:40 AM CheckField(): move is possible
10/29/2023 02:06:40 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001EE44AD3950> moves and attacks before: ([], [])
10/29/2023 02:06:40 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:06:40 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:06:40 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:06:40 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EE44AD2ED0> (5, 0)
10/29/2023 02:06:40 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:06:40 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:06:40 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001EE44AD2C50> (4, 0)
10/29/2023 02:06:40 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:06:40 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:06:40 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:06:40 AM CheckField(): moves and attacks registered
10/29/2023 02:06:40 AM CheckField(): there are possible moves from that location
10/29/2023 02:06:41 AM Move(): attempting move() with (6, 0)
10/29/2023 02:06:58 AM Lanuching Main.py
10/29/2023 02:07:15 AM CheckField(): attempting with (6, 0)
10/29/2023 02:07:15 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:07:15 AM CheckField(): move is possible
10/29/2023 02:07:15 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000001DAC722DE90> moves and attacks before: ([], [])
10/29/2023 02:07:15 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:07:15 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:07:15 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:07:15 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001DAC722CE10> (5, 0)
10/29/2023 02:07:15 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:07:15 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:07:15 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000001DAC722CB90> (4, 0)
10/29/2023 02:07:15 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:07:15 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:07:15 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:07:15 AM CheckField(): moves and attacks registered
10/29/2023 02:07:15 AM CheckField(): there are possible moves from that location
10/29/2023 02:07:51 AM Lanuching Main.py
10/29/2023 02:08:56 AM Lanuching Main.py
10/29/2023 02:09:29 AM CheckField(): attempting with (6, 0)
10/29/2023 02:09:29 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:09:29 AM CheckField(): move is possible
10/29/2023 02:09:29 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x0000022979529F10> moves and attacks before: ([], [])
10/29/2023 02:09:29 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:09:29 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:09:29 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:09:29 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022979528E50> (5, 0)
10/29/2023 02:09:29 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:09:29 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:09:29 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x0000022979528BD0> (4, 0)
10/29/2023 02:09:29 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:09:29 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:09:29 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:09:29 AM CheckField(): moves and attacks registered
10/29/2023 02:09:29 AM CheckField(): there are possible moves from that location
10/29/2023 02:10:55 AM Lanuching Main.py
10/29/2023 02:10:58 AM CheckField(): attempting with (6, 0)
10/29/2023 02:10:58 AM CheckIfMoveFromFieldIsPossible(): attempting with (6, 0) args
10/29/2023 02:10:58 AM CheckField(): move is possible
10/29/2023 02:10:58 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002C18E1F39D0> moves and attacks before: ([], [])
10/29/2023 02:10:58 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:10:58 AM Pawn Figure info: (6, 0, 'w', 'p')
10/29/2023 02:10:58 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:10:58 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C18E1F2F50> (5, 0)
10/29/2023 02:10:58 AM Pawn (5, 0) is empty appended moves [(5, 0)]
10/29/2023 02:10:58 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:10:58 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C18E1F2CD0> (4, 0)
10/29/2023 02:10:58 AM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
10/29/2023 02:10:58 AM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
10/29/2023 02:10:58 AM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
10/29/2023 02:10:58 AM CheckField(): moves and attacks registered
10/29/2023 02:10:58 AM CheckField(): there are possible moves from that location
10/29/2023 02:10:58 AM Move(): attempting move() with (6, 0)
10/29/2023 02:11:01 AM found move (4, 0) in [(5, 0), (4, 0)]
10/29/2023 02:11:04 AM CheckField(): attempting with (1, 0)
10/29/2023 02:11:04 AM CheckIfMoveFromFieldIsPossible(): attempting with (1, 0) args
10/29/2023 02:11:04 AM CheckField(): move is possible
10/29/2023 02:11:04 AM RenderPossibleMoves(): choosen figure: <piece.Pawn object at 0x000002C18E1F37D0> moves and attacks before: ([], [])
10/29/2023 02:11:04 AM Pawn attemping ReturnPossibleMoves() Method
10/29/2023 02:11:04 AM Pawn Figure info: (1, 0, 'b', 'p')
10/29/2023 02:11:04 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:11:04 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C18E1F2850> (2, 0)
10/29/2023 02:11:04 AM Pawn (2, 0) is empty appended moves [(2, 0)]
10/29/2023 02:11:04 AM Pawn attempting check on board[x-a][y]: True
10/29/2023 02:11:04 AM Pawn attempting check on board[x-a][y]: <field.field object at 0x000002C18E1F2A90> (3, 0)
10/29/2023 02:11:04 AM Pawn (3, 0) is empty appended moves [(2, 0), (3, 0)]
10/29/2023 02:11:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 0), (3, 0)], [])
10/29/2023 02:11:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (3, 0)], [])
10/29/2023 02:11:04 AM CheckField(): moves and attacks registered
10/29/2023 02:11:04 AM CheckField(): there are possible moves from that location
10/29/2023 02:11:04 AM Move(): attempting move() with (1, 0)
10/29/2023 02:11:06 AM found move (3, 0) in [(2, 0), (3, 0)]
